<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellImageProcess</name>
    </assembly>
    <members>
        <member name="T:KellImageProcess.Algorithm">
            <summary>
            数值分析算法
            </summary>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetEndPofLineK(System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            根据线段的始点、角度和长度，确定线段的正向终点
            </summary>
            <param name="startP"></param>
            <param name="angle">弧度为单位</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetEndPofLine_K(System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            根据线段的始点、角度和长度，确定线段的反向终点
            </summary>
            <param name="startP"></param>
            <param name="angle">弧度为单位</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.nCr(System.Int32,System.Int32)">
            <summary>
            求组合数
            </summary>
            <param name="m">取m个</param>
            <param name="n">总共n个</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetFXJ(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            求两点的方向角，范围[0, 360)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetDiffFXJ(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            求有序三点的方向角差(单位：度)
            </summary>
            <param name="p1">始点</param>
            <param name="p2">中间点</param>
            <param name="p3">终点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.F(System.Double[],System.Double)">
            <summary>
            求ceof系数决定函数所对应x自变量的函数值
            </summary>
            <param name="ceof"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetDS(System.Double[],System.Double)">
            <summary>
            First-Derivative
            </summary>
            <param name="ceof"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetDSN(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Point,System.Int32)">
            <summary>
            N-Derivative
            </summary>
            <param name="ps"></param>
            <param name="p"></param>
            <param name="js"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetDerivativeFunction(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            求导函数，返回导函数的系数数组(三次函数的系数数组，一维且长度为4)
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCornerPoint(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Point@)">
            <summary>
            求转弯点
            </summary>
            <param name="ps"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetGD(System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            求拐点
            </summary>
            <param name="ps">点集的个数要不能少于点集粒度(badDegree)的两倍</param>
            <param name="badDegree">点集粒度，常用[3,5,7,9,11]</param>
            <param name="gd"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Dlong(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            计算点pt到直线ab的距离
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="a">直线上的一点</param>
            <param name="b">直线上的另一点</param>
            <returns>pt点到直线上的距离</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Dlong(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            计算点pt到直线ab的距离
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="a">直线上的一点</param>
            <param name="b">直线上的另一点</param>
            <returns>pt点到直线上的距离</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.BoolSpotOnArc(System.Drawing.PointF,System.Drawing.PointF,System.Double,System.Double,System.Double)">
            <summary>
            判断点是否在弧上
            </summary>
            <param name="p">一点</param>
            <param name="arcCenter">弧心</param>
            <param name="r">半径</param>
            <param name="startangle">开始角</param>
            <param name="sweepangle">扇过角</param>
            <returns>在弧上返回</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.PolygonDimension(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            计算凸多边形的面积
            </summary>
            <param name="ps">多边形的各个顶点</param>
            <returns>多边形围成的面积</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.PolygonDimension(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            计算凸多边形的面积
            </summary>
            <param name="ps">多边形的各个顶点</param>
            <returns>多边形围成的面积</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.MatrixDeterminant(System.Double[0:,0:])">
            <summary>
            计算矩阵的行列式值
            </summary>
            <param name="ary">矩阵</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.AllLinePoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            得到线段上的所有的点
            </summary>
            <param name="lt1">线段上的一点</param>
            <param name="lt2">线段上的另一点</param>
            <returns>点集</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.AllPointPoints(System.Drawing.PointF,System.Double)">
            <summary>
            得到在圆上的所有点
            </summary>
            <param name="c">圆心</param>
            <param name="r">半径</param>
            <returns>点集</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.AllArcPoints(System.Drawing.PointF,System.Double,System.Double,System.Double)">
            <summary>
            得到在弧上的所有点
            </summary>
            <param name="p">弧心</param>
            <param name="r">弧半径</param>
            <param name="startangle">开始角</param>
            <param name="sweepangle">扇过角</param>
            <returns>点集</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.BoolRaisedPolygon(System.Drawing.PointF[])">
            <summary>
            是否是凸多边形
            </summary>
            <param name="pf">点集</param>
            <returns>是true</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.ToLine(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            所有的点顺时钟所在的直线
            </summary>
            <param name="a">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.RaisePolygonInCircle(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Double@)">
            <summary>
            计算凸多边形的内包圆
            </summary>
            <param name="pf"></param>
            <param name="c"></param>
            <param name="r"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.RectangleOnMorePoint(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            点集的外包正规矩形
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.RectangleOnMorePoint(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            点集的外包正规矩形
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.LineLength(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            两点间的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.LineLength(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            两点间的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCrossPointOfTwoLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            两线段的交点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCrossPointOfTwoLineSegment(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            两线段的交点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCrossPointOfTwoLine(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            两直线的交点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCrossPointOfTwoLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            两直线的交点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetCrossPointOfLineToLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            直线与线段的交点
            </summary>
            <param name="p1">直线的一点</param>
            <param name="p2">直线的另一点</param>
            <param name="p3">线段的一点</param>
            <param name="p4">线段的另一点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Multiply(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            求平面向量的叉积，并可以根据返回值判断三点的位置关系
            r》0:ep在向量op-sp的逆时针方向；
            r==0:op-sp-ep三点共线；
            r《0:ep在向量op-sp的顺时针方向
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Multiply(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            求平面向量的叉积，并可以根据返回值判断三点的位置关系
            r》0:ep在向量op-sp的逆时针方向；
            r==0:op-sp-ep三点共线；
            r《0:ep在向量op-sp的顺时针方向
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.OnLineSEG(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            判断点p是否在线段(p1,p2)上，条件：(p在线段l所在的直线上)而且(点p在线段l的正规矩形内)
            </summary>
            <param name="p1">线段的一点</param>
            <param name="p2">线段的另一点</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.OnLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            判断点p是否在直线(p1,p2)上
            </summary>
            <param name="p1">直线的一点</param>
            <param name="p2">直线的另一点</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CrossPointOfLineAndPolygon(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary>
            直线与多边形的交点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CrossPointOfLineAndRect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary>
            直线与矩形的交点
            </summary>
            <param name="pa"></param>
            <param name="pb"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CrossPointOfLineAndRect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            直线与矩形的交点
            </summary>
            <param name="pa"></param>
            <param name="pb"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeLine(System.Collections.Generic.List{System.Drawing.PointF},System.Single@,System.Single@)">
            <summary>
            拟合直线算法.拟合直线形如：y = a*x+b;
            </summary>
            <param name="pf">拟合点集合</param>
            <param name="a">系数a</param>
            <param name="b">参数b</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeLine(System.Collections.Generic.List{System.Drawing.PointF},System.Double@,System.Double@)">
            <summary>
            拟合直线算法.拟合直线形如：y = a*x+b;
            </summary>
            <param name="ps">拟合点集合</param>
            <param name="a">系数a</param>
            <param name="b">参数b</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeLine(System.Collections.Generic.List{System.Drawing.Point},System.Double@,System.Double@)">
            <summary>
            拟合直线算法.拟合直线形如：y = a*x+b;
            </summary>
            <param name="ps">拟合点集合</param>
            <param name="a">系数a</param>
            <param name="b">参数b</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.Pvint(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            过直线外一点的在直线上的垂足
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="lt1">直线上的一点</param>
            <param name="lt2">直线上的另一点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Pvint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            过直线外一点的在直线上的垂足
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="lt1">直线上的一点</param>
            <param name="lt2">直线上的另一点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeLine(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            拟合直线算法.拟合直线形如：y = a*x+b;
            </summary>
            <param name="ps">拟合点集合</param>
            <param name="PointA">拟合的线段端点A</param>
            <param name="PointB">拟合的线段端点B</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeLine(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            拟合直线算法.拟合直线形如：y = a*x+b;
            </summary>
            <param name="ps">拟合点集合</param>
            <param name="PointA">拟合的线段端点A</param>
            <param name="PointB">拟合的线段端点B</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.Sum(System.Single[])">
            <summary>
            求和算法
            </summary>
            <param name="pf">集合</param>
            <returns>返回集合的总和</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Multiply(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            求集合点Xi*Yi的总和
            </summary>
            <param name="pf">点的集合</param>
            <returns>返回总和</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.PingFangHe(System.Single[])">
            <summary>
            求数组平方和
            </summary>
            <param name="pf">数组</param>
            <returns>返回总和</returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeCircle(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Double@)">
            <summary>
            拟合圆算法
            </summary>
            <param name="ps">圆集合</param>
            <param name="center">圆心坐标</param>
            <param name="Rand">圆半径</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeCircle(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.PointF@,System.Double@)">
            <summary>
            拟合圆算法
            </summary>
            <param name="ps">圆集合</param>
            <param name="center">圆心坐标</param>
            <param name="Rand">圆半径</param>
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeArc(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Double@)">
            <summary>
            拟合弧
            </summary>
            <param name="pf">弧上点的数组。其中第一点和最后一点一定要是起始点。</param>
            <param name="center">弧心坐标</param>
            <param name="rand">弧半径</param>       
        </member>
        <member name="M:KellImageProcess.Algorithm.NiHeArc(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.PointF@,System.Double@)">
            <summary>
            拟合弧
            </summary>
            <param name="pf">弧上点的数组。其中第一点和最后一点一定要是起始点。</param>
            <param name="center">弧心坐标</param>
            <param name="rand">弧半径</param>       
        </member>
        <member name="M:KellImageProcess.Algorithm.Dotmultiply(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            求平面向量的点积，并可以根据返回值判断向量的夹角是锐是直还是钝
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p0"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Multiply(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            求平面向量的叉积，并可以根据返回值判断三点的位置关系
            r》0:ep在向量op-sp的逆时针方向；
            r==0:op-sp-ep三点共线；
            r《0:ep在向量op-sp的顺时针方向
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.OnLineSEG(KellImageProcess.Line2,KellImageProcess.Point2)">
            <summary>
            判断点p是否在线段l上，条件：(p在线段l所在的直线上)而且(点p在以线段l为对角线的矩形内)
            </summary>
            <param name="l"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.OnLine(KellImageProcess.Line2,KellImageProcess.Point2)">
            <summary>
            判断点p是否在直线l上
            </summary>
            <param name="l"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Rotate(KellImageProcess.Point2,System.Double,KellImageProcess.Point2)">
            <summary>
            返回点p以点o为圆心逆时针旋转alpha(单位：弧度)后所在的位置
            </summary>
            <param name="o"></param>
            <param name="alpha"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.dist(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            平面中两点的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Perpendicular(KellImageProcess.Point2,KellImageProcess.Line2)">
            <summary>
            求点C到线段AB所在直线的垂足 P
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <returns></returns> 
        </member>
        <member name="M:KellImageProcess.Algorithm.PtoLinesegDist(KellImageProcess.Point2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            求点p到线段l的最短距离,并返回线段上距该点最近的点np
            注意：np是线段l上到点p最近的点，不一定是垂足
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <param name="np"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Relation(KellImageProcess.Point2,KellImageProcess.Line2)">
            <summary>
            点与线段的关系
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.PtoLdist(KellImageProcess.Point2,KellImageProcess.Line2)">
            <summary>
            求点p到线段l所在直线的距离(即点p到垂足的距离),请注意本函数与PtoLinesegDist函数的区别
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <returns></returns>  
        </member>
        <member name="M:KellImageProcess.Algorithm.PtoPointSet(KellImageProcess.Point2[],KellImageProcess.Point2,KellImageProcess.Point2@)">
             <summary>
             计算点到折线集的最近距离,并返回最近点.
            注意：调用的是ptolineseg()函数
             </summary>
             <param name="pointset"></param>
             <param name="p"></param>
             <param name="q"></param>
             <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CircleInsidePolygon(KellImageProcess.Point2,System.Double,KellImageProcess.Point2[])">
            <summary>
            判断圆是否在多边形内
            ptolineseg()函数的应用2
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.cosine(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            返回两个矢量l1和l2的夹角的余弦(-1 --- 1)注意：如果想从余弦求夹角的话，注意反余弦函数的定义域是从 0到pi
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetAngle(KellImageProcess.Point3[],KellImageProcess.Point3@,KellImageProcess.Point3@,KellImageProcess.Point3@)">
            <summary>
            四点定角，p2为顶点
            </summary>
            <param name="ps"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.GetAngleValue(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            返回顶角在o点，起始边为os，终止边为oe的夹角(单位：弧度)
            </summary>
            <param name="o"></param>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.lsangle(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            返回线段l1与l2之间的夹角 单位：弧度 范围(-pi，pi)
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.intersect(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            如果线段u和v相交(包括相交在端点处)时，返回true
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns> 
        </member>
        <member name="M:KellImageProcess.Algorithm.intersect_A(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            (线段u和v相交)而且(交点不是双方的端点) 时返回true
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.intersect_l(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            线段v所在直线与线段u相交时返回true；方法：判断线段u是否跨立线段v
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.makeline(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            根据已知两点坐标，求过这两点的直线解析方程： a*x+b*y+c = 0  (a >= 0)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Symmetry(KellImageProcess.Line2,KellImageProcess.Point2)">
            <summary>
            求点p关于直线l的对称点
            </summary>
            <param name="l"></param>
            <param name="p"></param>
            <returns></returns>  
        </member>
        <member name="M:KellImageProcess.Algorithm.LineIntersect(KellImageProcess.Line2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            如果两条直线 l1(a1*x+b1*y+c1 = 0), l2(a2*x+b2*y+c2 = 0)相交，返回true，且返回交点p 
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.LineSEGIntersection(KellImageProcess.Line2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            如果线段l1和l2相交，返回true，且返回交点inter
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="inter"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.IsSimple(KellImageProcess.Point2[])">
            <summary>
            输入的多边形是否为简单多边形
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CheckConvex(KellImageProcess.Point2[],System.Boolean[]@)">
            <summary>
            返回值：按输入顺序返回多边形顶点的凸凹性判断，bc[i]=true,iff:第i个顶点是凸顶点
            </summary>
            <param name="polygon"></param>
            <param name="bc"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.IsConvex(KellImageProcess.Point2[])">
            <summary>
            返回值：多边形polygon是凸多边形时，返回true 
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Area_of_polygon(KellImageProcess.Point2[])">
            <summary>
            返回多边形面积(signed)；输入顶点按逆时针排列时，返回正值；否则返回负值
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.IsConterClock(KellImageProcess.Point2[])">
            <summary>
            如果输入顶点按逆时针排列，返回true
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.IsCCwize(KellImageProcess.Point2[])">
            <summary>
            另一种判断多边形顶点排列方向的方法，逆时针为true
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.InsidePolygon(KellImageProcess.Point2[],KellImageProcess.Point2)">
             <summary>
             射线法判断点q与多边形polygon的位置关系
             要求polygon为简单多边形，顶点逆时针排列
            如果点在多边形内：   返回0
            如果点在多边形边上： 返回1
            如果点在多边形外： 返回2
             </summary>
             <param name="Polygon"></param>
             <param name="q"></param>
             <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.InsideConvexPolygon(KellImageProcess.Point2[],KellImageProcess.Point2)">
            <summary>
            点q是凸多边形polygon内时，返回true；注意：多边形polygon一定要是凸多边形
            </summary>
            <param name="polygon"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.LinesegInsidePolygon(KellImageProcess.Point2[],KellImageProcess.Line2)">
            <summary>
            判断线段是否在简单多边形内
            </summary>
            <param name="polygon"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.AddPosPart(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            增加右边区域的面积
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="xtr"></param>
            <param name="ytr"></param>
            <param name="wtr"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.AddNegPart(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            增加左边区域的面积
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="xtl"></param>
            <param name="ytl"></param>
            <param name="wtl"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.AddRegion(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            增加区域面积
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="xtr"></param>
            <param name="ytr"></param>
            <param name="wtr"></param>
            <param name="xtl"></param>
            <param name="ytl"></param>
            <param name="wtl"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.cg_simple(KellImageProcess.Point2[])">
            <summary>
            求多边形的重心
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.GravityCenter(KellImageProcess.Point2[])">
            <summary>
            求凸多边形的重心,要求输入多边形按逆时针排序
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.A_point_insidepoly(KellImageProcess.Point2[])">
            <summary>
            给定一简单多边形，找出一个肯定在该多边形内的点
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.PointTangentPoly(KellImageProcess.Point2[],KellImageProcess.Point2,KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            求从多边形外一点p出发到一个简单多边形的切线,如果存在返回切点,
            其中rp点是右切点,lp是左切点
            </summary>
            <param name="polygon"></param>
            <param name="p"></param>
            <param name="rp"></param>
            <param name="lp"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.Core_exist(KellImageProcess.Point2[],KellImageProcess.Point2@)">
            <summary>
            如果多边形polygon的核存在，返回true，返回核上的一点p.顶点按逆时针方向输入
            </summary>
            <param name="polygon"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Point_in_circle(KellImageProcess.Point2,System.Double,KellImageProcess.Point2)">
             <summary>
             返回值： 点p在圆内(包括边界)时，返回true
            用途： 因为圆为凸集，所以判断点集，折线，多边形是否在圆内时，
            只需要逐一判断点是否在圆内即可。
             </summary>
             <param name="o"></param>
             <param name="r"></param>
             <param name="p"></param>
             <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Cocircle(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2@,System.Double@)">
            <summary>
            用 途：求不共线的三点确定一个圆
            返回值：如果三点共线，返回false；反之，返回true。圆心由q返回，半径由r返回
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Rect4thP(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            已知矩形的三个顶点(a,b,c)，计算第四个顶点d的坐标. 注意：已知的三个顶点可以是无序的
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CircleRelation(KellImageProcess.Point2,System.Double,KellImageProcess.Point2,System.Double)">
            <summary>
            两圆关系
            </summary>
            <param name="p1"></param>
            <param name="r1"></param>
            <param name="p2"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.CircleRecRelation(KellImageProcess.Point2,System.Double,KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            判定圆是否在矩形内，是就返回true（设矩形水平，且其四个顶点由左上开始按顺时针排列）
            </summary>
            <param name="pc"></param>
            <param name="r"></param>
            <param name="pr1"></param>
            <param name="pr2"></param>
            <param name="pr3"></param>
            <param name="pr4"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.P2planeDist(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            点到平面的距离,平面用一般式表示ax+by+cz+d=0
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.SameSide(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Line2)">
            <summary>
            两个点是否在直线同侧，是则返回true
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Reflect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,KellImageProcess.Line2@)">
            <summary>
            已知入射线、镜面，求反射线。
            </summary>
            <param name="a1"></param>
            <param name="b1"></param>
            <param name="c1"></param>
            <param name="a2"></param>
            <param name="b2"></param>
            <param name="c2"></param>
            <param name="mirrorReflectLine"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.r2inr1(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            矩形2（C，D）是否在1（A，B）内
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.c2point(KellImageProcess.Point2,System.Double,KellImageProcess.Point2,System.Double,KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            两圆交点
            </summary>
            <param name="p1"></param>
            <param name="r1"></param>
            <param name="p2"></param>
            <param name="r2"></param>
            <param name="rp1"></param>
            <param name="rp2"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.SwapPoints(KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            交换两点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.SwapDoubles(System.Double@,System.Double@)">
            <summary>
            交换两个浮点数值
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.c2area(KellImageProcess.Point2,System.Double,KellImageProcess.Point2,System.Double)">
            <summary>
            两圆公共面积
            必须保证相交
            </summary>
            <param name="p1"></param>
            <param name="r1"></param>
            <param name="p2"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.clpoint(KellImageProcess.Point2,System.Double,System.Double,System.Double,System.Double,KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            圆和直线关系
            0----相离 1----相切 2----相交
            </summary>
            <param name="p"></param>
            <param name="r"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="rp1"></param>
            <param name="rp2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.clpoint(KellImageProcess.Point2,System.Double,System.Double,KellImageProcess.Point2,KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            圆和直线关系
            0----相离 1----相切 2----相交
            rp1, rp2为交点
            </summary>
            <param name="p"></param>
            <param name="r"></param>
            <param name="xl"></param>
            <param name="pp"></param>
            <param name="rp1"></param>
            <param name="rp2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.incircle(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2@,System.Double@)">
            <summary>
            求内切圆
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="rp"></param>
            <param name="r"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.cutpoint(KellImageProcess.Point2,System.Double,KellImageProcess.Point2,KellImageProcess.Point2@,KellImageProcess.Point2@)">
            <summary>
            求切点
            p---圆心坐标， r---圆半径， sp---圆外一点， rp1,rp2---切点坐标
            </summary>
            <param name="p"></param>
            <param name="r"></param>
            <param name="sp"></param>
            <param name="rp1"></param>
            <param name="rp2"></param>
        </member>
        <member name="M:KellImageProcess.Algorithm.rotate(KellImageProcess.Line2,KellImageProcess.Line2)">
             <summary>
             l2在l1的左/右方向（l1为基准线），并且l1、l2不能为空
            返回 0： 重合；
            返回 1： 右旋；
            返回 –1： 左旋
             </summary>
             <param name="l1"></param>
             <param name="l2"></param>
             <returns></returns>
        </member>
        <member name="M:KellImageProcess.Algorithm.Check3PInLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            测试3点共线函数
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.Common">
            <summary>
            公共配置静态类
            </summary>
        </member>
        <member name="P:KellImageProcess.Common.Eps">
            <summary>
            误差
            </summary>
        </member>
        <member name="P:KellImageProcess.Common.FourOrNine">
            <summary>
            扫描位图时分四区域还是九区域
            </summary>
        </member>
        <member name="T:KellImageProcess.KellImageProcessException">
            <summary>
            由本程序集引发的异常类
            </summary>
        </member>
        <member name="M:KellImageProcess.KellImageProcessException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
            <param name="inner"></param>
        </member>
        <member name="P:KellImageProcess.KellImageProcessException.Msg">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:KellImageProcess.Matrix3x3">
            <summary>
            3×3 转换矩阵
            </summary>
        </member>
        <member name="F:KellImageProcess.Matrix3x3.BPP">
            <summary>
            每个像素占用4个字节
            </summary>
        </member>
        <member name="M:KellImageProcess.Matrix3x3.Init(System.Int32)">
            <summary>
            初始化窗口所有点为同一权值
            </summary>
            <param name="degree">权值</param>
        </member>
        <member name="M:KellImageProcess.Matrix3x3.Convolute(System.Drawing.Bitmap)">
            <summary>
            将图像按 3X3 窗口进行卷积转换
            </summary>
            <param name="srcImage">位图流</param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.TopLeft">
            <summary>
            获取或设置左上点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.TopMid">
            <summary>
            获取或设置正上点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.TopRight">
            <summary>
            获取或设置右上点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.MidLeft">
            <summary>
            获取或设置左点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.Center">
            <summary>
            获取或设置中心点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.MidRight">
            <summary>
            获取或设置右点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.BottomLeft">
            <summary>
            获取或设置左下点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.BottomMid">
            <summary>
            获取或设置正下点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.BottomRight">
            <summary>
            获取或设置右下点权值
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.Scale">
            <summary>
            获取或设置缩放比例
            </summary>
        </member>
        <member name="P:KellImageProcess.Matrix3x3.Offset">
            <summary>
            获取或设置偏移量
            </summary>
        </member>
        <member name="T:KellImageProcess.Statistics">
            <summary>
            数据统计类
            </summary>
        </member>
        <member name="M:KellImageProcess.Statistics.#ctor(System.Int32[])">
            <summary>
            建立数据统计资料
            </summary>
            <param name="sequence">数组序列</param>
        </member>
        <member name="M:KellImageProcess.Statistics.MaxMin">
            <summary>
            求最大值、最小值
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Value">
            <summary>
            获取数组序列
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Equalizer">
            <summary>
            获取经均衡化后的数组序列
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Probability">
            <summary>
            获取概率
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Sum">
            <summary>
            获取序列累加和
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Mean">
            <summary>
            获取加权平均数
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.StdDev">
            <summary>
            获取标准偏差
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Median">
            <summary>
            获取中值
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Maximum">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.Minimum">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.MaxIndex">
            <summary>
            获取最大值索引
            </summary>
        </member>
        <member name="P:KellImageProcess.Statistics.MinIndex">
            <summary>
            获取最小值索引
            </summary>
        </member>
        <member name="T:KellImageProcess.HSL">
            <summary>
            HSL 色彩空间结构体
            </summary>
        </member>
        <member name="M:KellImageProcess.HSL.Equals(System.Object)">
            <summary>
            判断 HSL 结构体是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.GetHashCode">
            <summary>
            返回哈希代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.op_Equality(KellImageProcess.HSL,KellImageProcess.HSL)">
            <summary>
            判断 HSL 结构体是否相等
            </summary>
            <param name="lHsl">HSL 结构体 1</param>
            <param name="rHsl">HSL 结构体 2</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.op_Inequality(KellImageProcess.HSL,KellImageProcess.HSL)">
            <summary>
            判断 HSL 结构体是否不相等
            </summary>
            <param name="lHsl">HSL 结构体 1</param>
            <param name="rHsl">HSL 结构体 2</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.FromHsl(System.Single,System.Single,System.Single)">
            <summary>
            根据 (hue, saturation, luminance) 分量建立 PhotoSprite.ColorSpace.HSL 结构体
            </summary>
            <param name="hue">色调[0, 360]</param>
            <param name="saturation">饱和度[0, 1]</param>
            <param name="luminance">亮度[0, 1]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.FromColor(System.Drawing.Color)">
            <summary>
            根据 Color 结构体建立 PhotoSprite.ColorSpace.HSL 结构体
            </summary>
            <param name="color">RGB 颜色结构体</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            根据 (red, green, blue) 颜色分量建立 PhotoSprite.ColorSpace.HSL 结构体
            </summary>
            <param name="red">red 分量</param>
            <param name="green">green 分量</param>
            <param name="blue">blue 分量</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.ToRgb">
            <summary>
            获取 RGB 颜色值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.GetRed">
            <summary>
            获取 RGB 结构中 red 分量值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.GetGreen">
            <summary>
            获取 RGB 结构中 green 分量值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.HSL.GetBlue">
            <summary>
            获取 RGB 结构中 blue 分量值
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.HSL.Hue">
            <summary>
            获取或设置色调[0, 360]
            </summary>
        </member>
        <member name="P:KellImageProcess.HSL.Saturation">
            <summary>
            获取或设置饱和度[0, 1]
            </summary>
        </member>
        <member name="P:KellImageProcess.HSL.Luminance">
            <summary>
            获取或设置亮度[0, 1]
            </summary>
        </member>
        <member name="T:KellImageProcess.Adjustment">
            <summary>
            图像调整类
            </summary>
        </member>
        <member name="M:KellImageProcess.Adjustment.ColorBalance(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            图像色彩平衡
            </summary>
            <param name="b">位图流</param>
            <param name="red">红色分量[-255, 255]</param>
            <param name="green">绿色分量[-255, 255]</param>
            <param name="blue">蓝色分量[-255, 255]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.Brightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            图像亮度调整
            </summary>
            <param name="b">位图流</param>
            <param name="degree">亮度值[-255, 255]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.Contrast(System.Drawing.Bitmap,System.Int32)">
            <summary>
            图像对比度调整
            </summary>
            <param name="b">位图流</param>
            <param name="degree">对比度[-100, 100]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.AdjustHsl(System.Drawing.Bitmap,System.Single,System.Single,System.Single)">
            <summary>
            按指定的色调、饱和度、亮度对图像进行调整
            </summary>
            <param name="b">位图流</param>
            <param name="hue">色调[-180, 180]</param>
            <param name="saturation">饱和度[-1, 1]</param>
            <param name="luminance">亮度[-1, 1]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.GammaCorrect(System.Drawing.Bitmap,System.Double)">
            <summary>
            图像 Gamma 矫正
            </summary>
            <param name="b">位图流</param>
            <param name="degree">Gamma 矫正量[0.1, 5.0]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.Invert(System.Drawing.Bitmap)">
            <summary>
            反转，负像
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.Interleaving(System.Drawing.Bitmap)">
            <summary>
            交叉反转
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.PseudoColor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            按函数曲线形式映射伪彩色
            </summary>
            <param name="b">位图流</param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.PseudoColor(System.Drawing.Bitmap,System.Drawing.Color[],System.Boolean)">
            <summary>
            按色彩表形式映射伪彩色
            </summary>
            <param name="b">位图流</param>
            <param name="colorTable">色彩映射表</param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.RotateChannel(System.Drawing.Bitmap)">
            <summary>
            轮换通道
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.ExtractChannel(System.Drawing.Bitmap,KellImageProcess.Adjustment.ChannelMode)">
            <summary>
            提取通道
            </summary>
            <param name="b">位图流</param>
            <param name="channelMode">通道模式[A, R, G, B]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.FilterChannel(System.Drawing.Bitmap,KellImageProcess.Adjustment.ChannelMode)">
            <summary>
            过滤通道
            </summary>
            <param name="b">位图流</param>
            <param name="channelMode">通道模式</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Adjustment.Mapping(System.Drawing.Bitmap,System.Byte[],KellImageProcess.Adjustment.ChannelMode)">
            <summary>
            图像色彩映射
            </summary>
            <param name="b">位图流</param>
            <param name="Map">映射表</param>
            <param name="channelMode">通道模式</param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.Adjustment.ChannelMode">
            <summary>
            通道模式
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Blue">
            <summary>
            蓝色通道
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Green">
            <summary>
            绿色通道
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Red">
            <summary>
            红色通道
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Alpha">
            <summary>
            Alpha 通道
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Cyan">
            <summary>
            青色 = 绿色 + 蓝色
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Megenta">
            <summary>
            品红 = 红色 + 蓝色
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.Yellow">
            <summary>
            黄色 = 红色 + 绿色
            </summary>
        </member>
        <member name="F:KellImageProcess.Adjustment.ChannelMode.White">
            <summary>
            白色 = 红色 + 绿色 + 蓝色
            </summary>
        </member>
        <member name="T:KellImageProcess.Histogram">
            <summary>
            直方图类
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.BPP">
            <summary>
            每个像素占用4个字节
            </summary>
        </member>
        <member name="M:KellImageProcess.Histogram.#ctor(System.Drawing.Bitmap)">
            <summary>
            建立图像直方图
            </summary>
            <param name="b">位图流</param>
        </member>
        <member name="M:KellImageProcess.Histogram.CountRgb">
            <summary>
            统计色彩 R、G、B 三分量频率
            </summary>
        </member>
        <member name="M:KellImageProcess.Histogram.CountBright">
            <summary>
            统计亮度频率
            </summary>
        </member>
        <member name="M:KellImageProcess.Histogram.CountGray">
            <summary>
            统计亮度频率
            </summary>
        </member>
        <member name="M:KellImageProcess.Histogram.DrawDiagram(System.Int32,System.Boolean,KellImageProcess.Histogram.ColorMode)">
            <summary>
            绘制直方图
            </summary>
            <param name="diagramHeight">图表高度</param>
            <param name="viewByLog">按 Log 函数绘制直方图</param>
            <param name="colorMode">色彩模式</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Histogram.Equalizer">
            <summary>
            绘制经过直方图均衡化处理的图像
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Histogram.Red">
            <summary>
            获取红色分量统计资料
            </summary>
        </member>
        <member name="P:KellImageProcess.Histogram.Green">
            <summary>
            获取绿色分量统计资料
            </summary>
        </member>
        <member name="P:KellImageProcess.Histogram.Blue">
            <summary>
            获取蓝色分量统计资料
            </summary>
        </member>
        <member name="P:KellImageProcess.Histogram.Bright">
            <summary>
            获取亮度统计资料
            </summary>
        </member>
        <member name="P:KellImageProcess.Histogram.Gray">
            <summary>
            获取灰度统计资料
            </summary>
        </member>
        <member name="T:KellImageProcess.Histogram.ColorMode">
            <summary>
            支持绘制的色彩模式
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.ColorMode.Red">
            <summary>
            红色
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.ColorMode.Green">
            <summary>
            绿色
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.ColorMode.Blue">
            <summary>
            蓝色
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.ColorMode.Brightness">
            <summary>
            亮度
            </summary>
        </member>
        <member name="F:KellImageProcess.Histogram.ColorMode.Gray">
            <summary>
            灰度
            </summary>
        </member>
        <member name="T:KellImageProcess.Logic">
            <summary>
            逻辑运算类
            </summary>
        </member>
        <member name="M:KellImageProcess.Logic.LogicOperate(System.Drawing.Bitmap,System.Drawing.Bitmap,KellImageProcess.Logic.LogicMethod)">
            <summary>
            图像逻辑运算
            </summary>
            <param name="bgImage">二值背景</param>
            <param name="fgImage">二值前景</param>
            <param name="logicMethod">逻辑运算方法</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Logic.LogicAnd(System.Byte[0:,0:],System.Byte[0:,0:])">
            <summary>
            图像逻辑与运算
            </summary>
            <param name="bg">背景二值化数组</param>
            <param name="fg">前景二值化数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Logic.LogicOr(System.Byte[0:,0:],System.Byte[0:,0:])">
            <summary>
            图像逻辑或运算
            </summary>
            <param name="bg">背景二值化数组</param>
            <param name="fg">前景二值化数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Logic.LogicNot(System.Drawing.Bitmap)">
            <summary>
            逻辑非运算
            </summary>
            <param name="b">二值位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Logic.LogicXor(System.Byte[0:,0:],System.Byte[0:,0:])">
            <summary>
            图像逻辑异或运算
            </summary>
            <param name="bg">背景二值化数组</param>
            <param name="fg">前景二值化数组</param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Logic.BackgroundRegion">
            <summary>
            获取或设置背景区域
            </summary>
        </member>
        <member name="P:KellImageProcess.Logic.ForegroundRegion">
            <summary>
            获取或设置前景区域
            </summary>
        </member>
        <member name="T:KellImageProcess.Logic.LogicMethod">
            <summary>
            逻辑运算方法
            </summary>
        </member>
        <member name="F:KellImageProcess.Logic.LogicMethod.And">
            <summary>
            与运算
            </summary>
        </member>
        <member name="F:KellImageProcess.Logic.LogicMethod.Or">
            <summary>
            或运算
            </summary>
        </member>
        <member name="F:KellImageProcess.Logic.LogicMethod.Xor">
            <summary>
            异或运算
            </summary>
        </member>
        <member name="T:KellImageProcess.RegionClip">
            <summary>
            区域修整类
            </summary>
        </member>
        <member name="M:KellImageProcess.RegionClip.#ctor(System.Drawing.Region)">
            <summary>
            初始化区域修整类
            </summary>
            <param name="region">修整区域</param>
        </member>
        <member name="M:KellImageProcess.RegionClip.Remove(System.Drawing.Bitmap)">
            <summary>
            去除掉图像中指定区域
            </summary>
            <param name="b">位图</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RegionClip.Hold(System.Drawing.Bitmap)">
            <summary>
            保留下图像中指定区域
            </summary>
            <param name="b">位图</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RegionClip.Replace(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            将背景中指定区域用前景的相应区域替换
            </summary>
            <param name="bgImage">背景</param>
            <param name="fgImage">前景</param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.RegionClip.SelectedRegion">
            <summary>
            获取或设置区域
            </summary>
        </member>
        <member name="T:KellImageProcess.ImageTransform">
            <summary>
            图像变换类
            </summary>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Translate(System.Drawing.Bitmap,System.Int32,System.Int32,KellImageProcess.ImageTransform.AreasMode)">
            <summary>
            图像平移
            </summary>
            <param name="b">位图流</param>
            <param name="horizontal">水平偏移量</param>
            <param name="vertical">垂直偏移量</param>
            <param name="areaMode">平移后图像留下的未知区域设置方式</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            图像尺寸调节
            </summary>
            <param name="b">原始图像</param>
            <param name="dstWidth">目标宽度</param>
            <param name="dstHeight">目标高度</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Crop(System.Drawing.Bitmap,System.Drawing.Region)">
            <summary>
            按指定的裁剪路径对图像进行裁剪
            </summary>
            <param name="b">原始图像</param>
            <param name="region">裁剪区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            以逆时针方向为正方向对图像进行旋转
            </summary>
            <param name="b">位图流</param>
            <param name="angle">旋转角度[0, 360]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Flip(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            对图像进行翻转变换，即镜像
            </summary>
            <param name="b">原始图像</param>
            <param name="isHorz">是否按水平方向进行翻转</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Transpose(System.Drawing.Bitmap)">
            <summary>
            对图像进行转置变换
            </summary>
            <param name="b">原始图像</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.SlantHorz(System.Drawing.Bitmap,System.Int32)">
            <summary>
            对图像进行水平方向倾斜变换，基准点为平行四边形左上顶点
            </summary>
            <param name="b">原始图像</param>
            <param name="horz">水平方向倾斜量</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.SlantVert(System.Drawing.Bitmap,System.Int32)">
            <summary>
            对图像进行垂直方向倾斜变换，基准点为平行四边形左上顶点
            </summary>
            <param name="b">原始图像</param>
            <param name="vert">垂直方向倾斜量</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ImageTransform.Trim(System.Drawing.Bitmap,KellImageProcess.ImageTransform.TrimMode)">
            <summary>
            修整
            </summary>
            <param name="b">位图流</param>
            <param name="trimAway">修整范围</param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.ImageTransform.AreasMode">
            <summary>
            未知区域设置模式
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.AreasMode.Transparent">
            <summary>
            透明
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.AreasMode.RepeatEdgePixels">
            <summary>
            重复边缘像素
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.AreasMode.WrapAround">
            <summary>
            四周环绕
            </summary>
        </member>
        <member name="T:KellImageProcess.ImageTransform.TrimMode">
            <summary>
            修整模式
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.TrimMode.None">
            <summary>
            不修整任何边
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.TrimMode.Top">
            <summary>
            修整上边
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.TrimMode.Bottom">
            <summary>
            修整下边
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.TrimMode.Left">
            <summary>
            修整左边
            </summary>
        </member>
        <member name="F:KellImageProcess.ImageTransform.TrimMode.Right">
            <summary>
            修整右边
            </summary>
        </member>
        <member name="T:KellImageProcess.MathLogic">
            <summary>
            逻辑算法类
            </summary>
        </member>
        <member name="M:KellImageProcess.MathLogic.SearchMid(System.Collections.Generic.List{System.Byte})">
            <summary>
            利用快速排序查找中值
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.MathLogic.BinSort(System.Collections.Generic.List{System.Byte},System.Int32,System.Int32)">
            <summary>
            二分快速排序
            </summary>
            <param name="a"></param>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.MathLogic.BinSearch(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            二分(对半)查找
            </summary>
            <param name="a">要查找的数组</param>
            <param name="k">要查找的对象</param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.LinkedPointList">
            <summary>
            相邻点集结构
            </summary>
        </member>
        <member name="F:KellImageProcess.LinkedPointList.Linked">
            <summary>
            是否连通
            </summary>
        </member>
        <member name="F:KellImageProcess.LinkedPointList.PointList">
            <summary>
            点集
            </summary>
        </member>
        <member name="T:KellImageProcess.HistogramType">
            <summary>
            直方图类型
            </summary>
        </member>
        <member name="F:KellImageProcess.HistogramType.Gray">
            <summary>
            灰度直方图
            </summary>
        </member>
        <member name="F:KellImageProcess.HistogramType.Red">
            <summary>
            红色通道直方图
            </summary>
        </member>
        <member name="F:KellImageProcess.HistogramType.Green">
            <summary>
            绿色通道直方图
            </summary>
        </member>
        <member name="F:KellImageProcess.HistogramType.Blue">
            <summary>
            蓝色通道直方图
            </summary>
        </member>
        <member name="T:KellImageProcess.RectBitmap">
            <summary>
            指定区域的位图结构
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmap.bmp">
            <summary>
            整体位图
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmap.rect">
            <summary>
            指定区域
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmap.blkORwht">
            <summary>
            0为黑检测，其他为白检测
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmap.threshold">
            <summary>
            灰度阀值
            </summary>
        </member>
        <member name="T:KellImageProcess.RectBitmapWithPath">
            <summary>
            指定路径的位图结构
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithPath.bmp">
            <summary>
            整体位图
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithPath.rect">
            <summary>
            指定区域
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithPath.blkORwht">
            <summary>
            0为黑检测，其他为白检测
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithPath.threshold">
            <summary>
            灰度阀值
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithPath.path">
            <summary>
            外部大位图的路径
            </summary>
        </member>
        <member name="T:KellImageProcess.RectBitmapWithRegion">
            <summary>
            指定路径的位图结构
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithRegion.bmp">
            <summary>
            整体位图
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithRegion.rect">
            <summary>
            指定区域
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithRegion.blkORwht">
            <summary>
            0为黑检测，其他为白检测
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithRegion.threshold">
            <summary>
            灰度阀值
            </summary>
        </member>
        <member name="F:KellImageProcess.RectBitmapWithRegion.region">
            <summary>
            外部大位图的区域
            </summary>
        </member>
        <member name="T:KellImageProcess.PointColor">
            <summary>
            带位置信息的像素
            </summary>
        </member>
        <member name="F:KellImageProcess.PointColor.Location">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:KellImageProcess.PointColor.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="T:KellImageProcess.Linepoint">
            <summary>
            直线
            </summary>
        </member>
        <member name="F:KellImageProcess.Linepoint.lt1">
            <summary>
            在直线上的一点
            </summary>
        </member>
        <member name="F:KellImageProcess.Linepoint.lt2">
            <summary>
            在直线上的另一点
            </summary>
        </member>
        <member name="T:KellImageProcess.ThreadCommon">
            <summary>
            多线程公用类
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.linked1">
            <summary>
            第1方向是否连通
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.linked2">
            <summary>
            第2方向是否连通
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.linked3">
            <summary>
            第3方向是否连通
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.lps1">
            <summary>
            第1方向的相邻点集
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.lps2">
            <summary>
            第2方向的相邻点集
            </summary>
        </member>
        <member name="F:KellImageProcess.ThreadCommon.lps3">
            <summary>
            第3方向的相邻点集
            </summary>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.CallbackRoadWithPath1(System.IAsyncResult)">
            <summary>
            第1方向连通路径回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.CallbackRoadWithPath2(System.IAsyncResult)">
            <summary>
            第2方向连通路径回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.CallbackRoadWithPath3(System.IAsyncResult)">
            <summary>
            第3方向连通路径回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.CheckThePointIsKeyPoint(System.Drawing.Point,System.Drawing.Imaging.BitmapData,System.Int32,System.Byte)">
            <summary>
            判断指定的点是否为内存位图中的关键点
            </summary>
            <param name="pp"></param>
            <param name="data"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.LinkedPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            判断指定的两点是否相临(八临域)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.LinkedPoints(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            判断指定的两点是否相临(有临近系数near控制)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="near"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.ThreadCommon.CheckSomeRoadWithPath(KellImageProcess.RectBitmapWithPath,System.Boolean,System.Int32,System.Boolean@)">
            <summary>
            检测指定位图内是否存在连通点
            </summary>
            <param name="bmp"></param>
            <param name="isCZ"></param>
            <param name="direction"></param>
            <param name="linked"></param>
        </member>
        <member name="T:KellImageProcess.MultiThreading4">
            <summary>
            4线程类
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.exist1">
            <summary>
            第1区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.exist2">
            <summary>
            第2区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.exist3">
            <summary>
            第3区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.exist4">
            <summary>
            第4区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRect1">
            <summary>
            第1区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRect2">
            <summary>
            第2区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRect3">
            <summary>
            第3区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRect4">
            <summary>
            第4区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existPath1">
            <summary>
            第1区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existPath2">
            <summary>
            第2区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existPath3">
            <summary>
            第3区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existPath4">
            <summary>
            第4区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRegion1">
            <summary>
            第1区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRegion2">
            <summary>
            第2区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRegion3">
            <summary>
            第3区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading4.existRegion4">
            <summary>
            第4区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTask1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTask2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTask3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTask4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRect1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRect2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRect3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRect4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithPath1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithPath2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithPath3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithPath4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRegion1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRegion2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRegion3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CallbackTaskWithRegion4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CheckSomeRectWithPath(KellImageProcess.RectBitmapWithPath,System.Boolean@)">
            <summary>
            检测指定路径范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CheckSomeRectWithRegion(KellImageProcess.RectBitmapWithRegion,System.Boolean@)">
            <summary>
            检测指定区域范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CheckWholeRect(KellImageProcess.RectBitmap,System.Boolean@)">
            <summary>
            检测整个位图范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading4.CheckSomeRect(KellImageProcess.RectBitmap,System.Boolean@)">
            <summary>
            检测指定矩形范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="T:KellImageProcess.MultiThreading9">
            <summary>
            9线程类
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist1">
            <summary>
            第1区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist2">
            <summary>
            第2区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist3">
            <summary>
            第3区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist4">
            <summary>
            第4区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist5">
            <summary>
            第5区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist6">
            <summary>
            第6区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist7">
            <summary>
            第7区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist8">
            <summary>
            第8区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.exist9">
            <summary>
            第9区域的是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect1">
            <summary>
            第1区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect2">
            <summary>
            第2区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect3">
            <summary>
            第3区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect4">
            <summary>
            第4区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect5">
            <summary>
            第5区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect6">
            <summary>
            第6区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect7">
            <summary>
            第7区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect8">
            <summary>
            第8区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRect9">
            <summary>
            第9区域的指定矩形范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath1">
            <summary>
            第1区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath2">
            <summary>
            第2区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath3">
            <summary>
            第3区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath4">
            <summary>
            第4区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath5">
            <summary>
            第5区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath6">
            <summary>
            第6区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath7">
            <summary>
            第7区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath8">
            <summary>
            第8区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existPath9">
            <summary>
            第9区域的指定路径范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion1">
            <summary>
            第1区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion2">
            <summary>
            第2区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion3">
            <summary>
            第3区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion4">
            <summary>
            第4区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion5">
            <summary>
            第5区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion6">
            <summary>
            第6区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion7">
            <summary>
            第7区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion8">
            <summary>
            第8区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="F:KellImageProcess.MultiThreading9.existRegion9">
            <summary>
            第9区域的指定区域范围内是否已存在关键点
            </summary>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask5(System.IAsyncResult)">
            <summary>
            第5区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask6(System.IAsyncResult)">
            <summary>
            第6区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask7(System.IAsyncResult)">
            <summary>
            第7区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask8(System.IAsyncResult)">
            <summary>
            第8区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTask9(System.IAsyncResult)">
            <summary>
            第9区域是否存在关键点回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect5(System.IAsyncResult)">
            <summary>
            第5区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect6(System.IAsyncResult)">
            <summary>
            第6区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect7(System.IAsyncResult)">
            <summary>
            第7区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect8(System.IAsyncResult)">
            <summary>
            第8区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRect9(System.IAsyncResult)">
            <summary>
            第9区域是否存在关键点回调函数(位图中某矩形范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath5(System.IAsyncResult)">
            <summary>
            第5区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath6(System.IAsyncResult)">
            <summary>
            第6区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath7(System.IAsyncResult)">
            <summary>
            第7区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath8(System.IAsyncResult)">
            <summary>
            第8区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithPath9(System.IAsyncResult)">
            <summary>
            第9区域是否存在关键点回调函数(位图中某路径范围内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion1(System.IAsyncResult)">
            <summary>
            第1区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion2(System.IAsyncResult)">
            <summary>
            第2区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion3(System.IAsyncResult)">
            <summary>
            第3区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion4(System.IAsyncResult)">
            <summary>
            第4区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion5(System.IAsyncResult)">
            <summary>
            第5区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion6(System.IAsyncResult)">
            <summary>
            第6区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion7(System.IAsyncResult)">
            <summary>
            第7区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion8(System.IAsyncResult)">
            <summary>
            第8区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CallbackTaskWithRegion9(System.IAsyncResult)">
            <summary>
            第9区域是否存在关键点回调函数(位图中某区域内)
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CheckSomeRectWithPath(KellImageProcess.RectBitmapWithPath,System.Boolean@)">
            <summary>
            检测指定路径范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CheckSomeRectWithRegion(KellImageProcess.RectBitmapWithRegion,System.Boolean@)">
            <summary>
            检测指定区域范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CheckWholeRect(KellImageProcess.RectBitmap,System.Boolean@)">
            <summary>
            检测整个位图范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="M:KellImageProcess.MultiThreading9.CheckSomeRect(KellImageProcess.RectBitmap,System.Boolean@)">
            <summary>
            检测指定矩形范围内是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="exist"></param>
        </member>
        <member name="T:KellImageProcess.AccessPixel">
            <summary>
            像素访问处理类
            </summary>
        </member>
        <member name="M:KellImageProcess.AccessPixel.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.AccessPixel.#ctor(System.Drawing.Bitmap)">
            <summary>
            初始化位图构造函数
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.TransparentBackground(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">
            <summary>
            将指定位图的背景以指定的背景颜色及颜色容差进行透明化
            </summary>
            <param name="bmp">指定位图</param>
            <param name="backgroundColor">指定的背景颜色</param>
            <param name="tolerance">颜色容差，默认为0</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetReverseColor(System.Collections.Generic.List{KellImageProcess.PointColor})">
            <summary>
            获取指定带有位置信息像素数组的反色信息
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RemoveExceptionPointAndInterpolation(System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Double,System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            去除点集中的异常点，且插值趋势点(注：errPs.Count不一定等于interPs.Count，即errPs.Count>=interPs.Count)
            </summary>
            <param name="ps"></param>
            <param name="badDegree">点集粒度，常用范围[3,5,7,9,11]，粒度越小插值越细，最佳的经验值为[3,5]</param>
            <param name="factor">波动系数，常用范围[0,1]，系数越小插值趋势点越逼近原始点，最佳的经验值范围[0.01,0.1]</param>
            <param name="containsInterPs"></param>
            <param name="errPs"></param>
            <param name="interPs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetShortDisP(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Point},System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            求指定异常点到两个临近点的垂足，且返回该两个临近点
            </summary>
            <param name="p"></param>
            <param name="errPs"></param>
            <param name="goodPs"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Pvint(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            过直线外一点的在直线上的垂足
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="lt1">直线上的一点</param>
            <param name="lt2">直线上的另一点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBadPoints(System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Double)">
            <summary>
            获取指定点集中的异常点(集)
            </summary>
            <param name="ps"></param>
            <param name="badDegree">点集粒度，常用范围[3,5,7,9,11]，粒度越小插值越细，最佳的经验值为[3,5]</param>
            <param name="factor">波动系数，常用范围[0,1]，系数越小插值趋势点越逼近原始点，最佳的经验值范围[0.01,0.1]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.F(System.Double[],System.Double)">
            <summary>
            求ceof系数决定函数所对应x自变量的函数值
            </summary>
            <param name="ceof"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDS(System.Double[],System.Double)">
            <summary>
            First-Derivative
            </summary>
            <param name="ceof"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDSN(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Point,System.Int32)">
            <summary>
            N-Derivative
            </summary>
            <param name="ps"></param>
            <param name="p"></param>
            <param name="js"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDerivativeFunction(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            求导函数，返回导函数的系数数组(三次函数的系数数组，一维且长度为4)
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDSN(System.Drawing.Point[],System.Drawing.Point,System.Int32)">
            <summary>
            N-Derivative
            </summary>
            <param name="ps"></param>
            <param name="p"></param>
            <param name="js"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDerivativeFunction(System.Drawing.Point[])">
            <summary>
            求导函数，返回导函数的系数数组(三次函数的系数数组，一维且长度为4)
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDSN(System.Double[],System.Double,System.Int32,System.Double)">
            <summary>
            N-Derivative
            </summary>
            <param name="ceof"></param>
            <param name="x"></param>
            <param name="js"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDerivativeFunction(System.Double[],System.Double,System.Double)">
            <summary>
            求导函数，返回导函数的系数数组(三次函数的系数数组，一维且长度为4)
            </summary>
            <param name="ceof"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.SortLinkPs(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Rectangle,System.Double,System.Drawing.Point,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.List{System.Drawing.Point}}@)">
            <summary>
            对点集进行排序
            </summary>
            <param name="ps"></param>
            <param name="rect"></param>
            <param name="near">临近系数，取2或3时效果最佳</param>
            <param name="firP">指定的路径开始点</param>
            <param name="moreWay">如果为true，则返回所有连通路径中的最长者，否则返回一条合并所有临近点的总路径</param>
            <param name="linkWays">所有连通路径的点集数组的列表</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindFirstP(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.Rectangle)">
            <summary>
            寻找点集路径的开始点
            </summary>
            <param name="ps"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindNearP(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            寻找点集路径的最近点
            </summary>
            <param name="p"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCornerPoint(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            根据指定区域获取转弯点
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <param name="threshold"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCornerPoint(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Byte,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            根据指定路径获取转弯点
            </summary>
            <param name="b"></param>
            <param name="path"></param>
            <param name="threshold"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMaxDistanceOf3DpointsCube(System.Collections.Generic.List{KellImageProcess.Point3})">
            <summary>
            获取三维点集所确定的立方体的对顶线的长度
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAvgColorByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            获取位图中指定路径下的平均颜色
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAvgColorByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Int32@)">
            <summary>
            获取位图中指定路径下的平均颜色，并返回该路径下颜色的色系范围
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="needSmooth"></param>
            <param name="range"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAvgColorByRect(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域下的平均颜色
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAvgColorByRect(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean,System.Int32@)">
            <summary>
            获取位图中指定区域下的平均颜色，并返回该区域下颜色的色系范围
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="needSmooth"></param>
            <param name="range"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.HaveNGcolorPointByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            判断位图中指定路径下是否存在超出指定色系范围内的NG像素点，采用Distance方法，较快
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="needSmooth"></param>
            <param name="avgColor"></param>
            <param name="tolerance"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.HaveNGcolorPointByRect(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            判断位图中指定区域下是否存在超出指定色系范围内的NG像素点，采用Distance方法，较快
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="needSmooth"></param>
            <param name="avgColor"></param>
            <param name="tolerance"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.HaveNGcolorPointByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            判断位图中指定路径下是否存在超出指定色系范围内的NG像素点，采用Contains方法，较慢
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="needSmooth"></param>
            <param name="cs"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.HaveNGcolorPointByRect(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            判断位图中指定区域下是否存在超出指定色系范围内的NG像素点，采用Contains方法，较慢
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="needSmooth"></param>
            <param name="cs"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetNearestColors(System.Drawing.Color,System.Int32)">
            <summary>
            获取指定颜色和色差的相似颜色数组(色系)
            </summary>
            <param name="c"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPointsByNearestColor(System.Drawing.Bitmap,System.Drawing.Color,System.Int32)">
            <summary>
            获取在位图中按照指定颜色和色差所确定颜色系内的所有像素点
            </summary>
            <param name="bmp"></param>
            <param name="c"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPointsByNearestColorByContains(System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Drawing.Color,System.Drawing.Bitmap@)">
            <summary>
            获取在位图中按照指定颜色和色差所确定颜色系内的所有像素点，并返回只含该颜色区域的位图
            </summary>
            <param name="bmp"></param>
            <param name="c"></param>
            <param name="tolerance"></param>
            <param name="backgroundColor"></param>
            <param name="outBmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPointsByNearestColorByRemove(System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Drawing.Color,System.Drawing.Bitmap@)">
            <summary>
            获取在位图中按照指定颜色和色差所确定颜色系内的所有像素点，并返回去除该颜色区域的位图
            </summary>
            <param name="bmp"></param>
            <param name="c"></param>
            <param name="tolerance"></param>
            <param name="insteadColor">
            <param name="outBmp"></param></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDifferentFrom2BmpWithOriginImage(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Drawing.Color,System.Drawing.Bitmap@)">
            <summary>
            获取两个位图的差异点集，并返回差异位图(保留原图)
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="tolerance"></param>
            <param name="fillColor"></param>
            <param name="diffBmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetDifferentFrom2Bmp(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Drawing.Bitmap@)">
            <summary>
            获取两个位图的差异点集，并返回差异二值位图(不保留原图)
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="tolerance"></param>
            <param name="diffBmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.EdgeEnhance(System.Drawing.Bitmap,System.Int32)">
            <summary>
            边缘增强(半阀值化)
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阈值[0,255]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.EdgeEnhance(System.Drawing.Bitmap)">
            <summary>
            边缘增强
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetThresholdAuto(System.Drawing.Bitmap)">
            <summary>
            自动获取指定位图的前背景灰度阀值
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.OTSUThresholdValue(System.Drawing.Bitmap)">
            <summary>
            OTSU大津法求阈值
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.TheBestThresholdValue(System.Drawing.Bitmap)">
            <summary>
            最佳法求阈值
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTopPoint(System.Drawing.Bitmap,System.Boolean,System.Int32,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在指定的路径下寻找最值
            </summary>
            <param name="bmp"></param>
            <param name="IsY"></param>
            <param name="MinMax"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.QuasiPixel(System.Drawing.Bitmap,System.UInt32)">
            <summary>
            将指定的位图转化为亚像素大位图
            </summary>
            <param name="bmp"></param>
            <param name="quasi">正整数</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.QuasiPixel(System.Drawing.Bitmap,System.Int32,System.Int32,System.UInt32)">
            <summary>
            获取原位图中指定像素的亚像素位图
            </summary>
            <param name="bmp"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="quasi">正整数</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ScalePixelByFormat(System.Drawing.Bitmap,System.UInt32)">
            <summary>
            以指定放大系数放大位图并且格式化
            </summary>
            <param name="bmp"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ScalePixelNoFormat(System.Drawing.Bitmap,System.UInt32)">
            <summary>
            以指定放大系数放大位图不用格式化
            </summary>
            <param name="bmp"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FastClipBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            快速剪裁指定区域的位图
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.MergeJSByBright(System.Collections.Generic.List{System.Drawing.Bitmap})">
            <summary>
            合并景深位图(返回的位图尺寸为最大的那张大小)
            Bright比Gray速度快
            </summary>
            <param name="bmps">位图数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantPixelsByBright(System.Collections.Generic.List{System.Drawing.Bitmap})">
            <summary>
            获取位图数组中最清晰的像素颜色数组
            </summary>
            <param name="bmps">位图数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.MergeJSByGray(System.Collections.Generic.List{System.Drawing.Bitmap})">
            <summary>
            合并景深位图(返回的位图尺寸为最大的那张大小)
            Gray速度没有Bright快
            </summary>
            <param name="bmps">位图数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantPixelsByGray(System.Collections.Generic.List{System.Drawing.Bitmap})">
            <summary>
            获取位图数组中最清晰的像素颜色数组
            </summary>
            <param name="bmps">位图数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Crop(System.Drawing.Bitmap,System.Drawing.Region)">
            <summary>
            按指定的裁剪路径对图像进行裁剪
            </summary>
            <param name="b">原始图像</param>
            <param name="region">裁剪区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Filtering(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            缩放滤波　类似开运算的方法，利用先缩小再放大的不可逆性来达到钝化的效果
            </summary>
            <param name="b"></param>
            <param name="insteadBoundColor"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Sharpen(System.Drawing.Bitmap)">
            <summary>
            对图像进行锐化处理
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.SharpenMore(System.Drawing.Bitmap)">
            <summary>
            对图像进行加强锐化处理
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Filtering(System.Drawing.Bitmap)">
            <summary>
            快速算法的中值滤波，返回滤波后的彩图(未经灰度化或二值化的位图)，缺点：效果不明显！
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Filtering(System.Drawing.Bitmap,System.Int32,System.Byte,System.Byte)">
            <summary>
            利用迭代开运算的方法进行图像滤波，返回二值位图
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="degree">迭代次数，范围[1, 255]，默认为1次</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FilterNxN(System.Drawing.Bitmap,System.Int32)">
            <summary>
            N×N 窗口中值滤波
            </summary>
            <param name="b">位图流</param>
            <param name="N">滤波窗口大小，N 为奇数</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thawing(System.Drawing.Bitmap,System.Int32,System.Byte,System.Byte)">
            <summary>
            利用迭代闭运算的方法进行图像融合
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="degree">迭代次数，范围[2, 255]，默认为2次</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Opening(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            开运算
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Closing(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            闭运算
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thresholding(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            阈值化
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阈值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thresholding(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte,System.Boolean)">
            <summary>
            指定区域阈值化
            </summary>
            <param name="b">位图流</param>
            <param name="rect">指定区域</param>
            <param name="threshold">阈值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.DilationCross(System.Drawing.Bitmap,System.Int32,System.Byte)">
            <summary>
            十字型膨胀
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.DilationCross(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte)">
            <summary>
            在没有灰度化位图的指定区域的十字型膨胀，注意在调用时记得返回的位图位置在path的左上角(Location = rect.Location)
            </summary>
            <param name="b">没有灰度化的位图</param>
            <param name="rect">指定区域</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.DilationCross(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            十字型膨胀
            </summary>
            <param name="src">二值化数组</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ErosionCross(System.Drawing.Bitmap,System.Int32,System.Byte)">
            <summary>
            十字型腐蚀
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ErosionCross(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte)">
            <summary>
            在没有灰度化位图的指定区域的十字型腐蚀，注意在调用时记得返回的位图位置在path的左上角(Location = rect.Location)
            </summary>
            <param name="b">没有灰度化的位图</param>
            <param name="rect">指定区域</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ErosionCross(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            十字型腐蚀
            </summary>
            <param name="src">二值化数组</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thinning(System.Drawing.Bitmap)">
            <summary>
            细化
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thickening(System.Drawing.Bitmap)">
            <summary>
            粗化
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thinning(System.Byte[0:,0:])">
            <summary>
            细化
            </summary>
            <param name="src">二值化数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thickening(System.Byte[0:,0:])">
            <summary>
            粗化
            </summary>
            <param name="src">二值化数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GrayExtend(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            获取经过灰度拉伸后的位图(灰度图)
            </summary>
            <param name="srcBmp"></param>
            <param name="graied"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GrayExtend(System.Drawing.Bitmap)">
            <summary>
            获取经过拉伸后的位图
            </summary>
            <param name="srcBmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetGrayExValue(System.Byte)">
            <summary>
            拉伸范围[0,60)[60,180)[180,255)[255] --> [0,30)[30,220)[220,255)[255]
            </summary>
            <param name="gray"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Array2Image(System.Byte[0:,0:],System.Drawing.Imaging.PixelFormat)">
            <summary>
            将二维数组转换为灰度位图流
            </summary>
            <param name="GrayArray">灰度数组</param>
            <param name="pf"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourPick(System.Byte[0:,0:])">
            <summary>
            轮廓提取
            </summary>
            <param name="b">二值图数据数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourTrace(System.UInt16[0:,0:])">
            <summary>
            轮廓跟踪
            </summary>
            <param name="Sign">区域标记数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageRegion(System.Drawing.Bitmap,System.Boolean,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Drawing.Color,System.Drawing.Point[]@)">
            <summary>
            按指定的区域号绘制出对应的区域
            </summary>
            <param name="b">二值位图流</param>
            <param name="graied">已经灰度化</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="Region">区域号</param>
            <param name="showContour">指定bool值，是显示轮廓线，否显示区域块</param>
            <param name="color">轮廓线或区域块的颜色</param>
            <param name="ps">返回轮廓线或区域块内的点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourTrace(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            轮廓跟踪，速度较慢，且得到的轮廓信息很单纯
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourTrace(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            指定区域中轮廓跟踪，速度较慢，且得到的轮廓信息很单纯
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourPick(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            轮廓提取，速度较快，且得到的轮廓信息很详细，且包括外框
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ContourPick(System.Drawing.Bitmap,System.Byte,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            指定区域中轮廓提取，速度较快，且得到的轮廓信息很详细，且包括外框
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImagePerimeter(System.UInt16[0:,0:])">
            <summary>
            区域周长
            </summary>
            <param name="Sign">二值图像标记数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImagePerimeter(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            获取每个区域的周长信息
            </summary>
            <param name="b">二值位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImagePerimeter(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            获取指定区域中每个区域的周长信息
            </summary>
            <param name="b">二值位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageArea(System.UInt16[0:,0:])">
            <summary>
            区域面积
            </summary>
            <param name="Sign">二值图像标记数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageSign(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            标记一幅没有灰度化的位图图像
            </summary>
            <param name="bmp">位图</param>
            <param name="blkORwht">黑边还是白边检测</param>
            <param name="threshold">阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageArea(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在没有灰度化位图中获取每个区域的面积信息
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageArea(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在没有灰度化位图的指定区域下获取每个区域的面积信息
            </summary>
            <param name="b">二值位图流</param>
            <param name="rect">指定区域</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageArea(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在没有灰度化位图的指定路径下获取每个区域的面积信息
            </summary>
            <param name="b">二值位图流</param>
            <param name="path">指定路径</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ReplaceSign(System.UInt16[0:,0:]@,System.UInt16,System.UInt16)">
            <summary>
            用新的标记号替换掉标记数组中旧的标记号
            </summary>
            <param name="Sign">二值图像标记数组</param>
            <param name="srcSign">原始标记号</param>
            <param name="dstSign">目标标记号</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageSign(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在指定的区域中标记一幅位图图像
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定的区域</param>
            <param name="blkORwht">黑边还是白边检测</param>
            <param name="threshold">阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ImageSign(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean)">
            <summary>
            在指定的路径中标记一幅位图图像
            </summary>
            <param name="bmp">位图</param>
            <param name="path">指定的路径</param>
            <param name="blkORwht">黑边还是白边检测</param>
            <param name="threshold">阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Drawing.Color,System.Boolean)">
            <summary>
            在指定的位图中以指定的颜色绘画封闭区域的边框（或填充整块区域），并返回结果图
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="color"></param>
            <param name="containBounds">是否包括边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            在指定的位图中获取指定区域的边框（或填充整块区域）的点集
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="containBounds">是否包括边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@,System.Boolean)">
            <summary>
            在指定的位图中获取指定区域的边框（或填充整块区域）的点集，以及其他非指定区域的点集(即otherSquares)
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="otherSquares"></param>
            <param name="containBounds">是否包含边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Drawing.Color,System.Boolean)">
            <summary>
            在指定的位图中以指定的颜色绘画封闭路径的边框（或填充整个路径），并返回结果图
            </summary>
            <param name="b"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="color"></param>
            <param name="containBounds">是否包括边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            在指定的位图中获取指定路径的边框（或填充整个路径）的点集
            </summary>
            <param name="b"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="containBounds">是否包含边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetSquareContourOrFillInternal(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.UInt16[],System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@,System.Boolean)">
            <summary>
            在指定的位图中获取指定路径的边框（或填充整个路径）的点集，以及其他非指定路径的点集(即otherSquares)
            </summary>
            <param name="b"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="Region"></param>
            <param name="fill"></param>
            <param name="otherSquares"></param>
            <param name="containBounds">是否包括边框</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetFormImage(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            获取窗体的外观位图
            </summary>
            <param name="form">窗体</param>
            <param name="showAll">是否包括标题栏和边框</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetControlImage(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            获取控件的外观位图
            </summary>
            <param name="control">控件</param>
            <param name="showAll">是否包括边框</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRegionFromBmp(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            取得一个图片中非透明色部分的区域
            </summary>
            <param name="b">取其区域的图片</param>
            <param name="transparentColor">透明色</param>
            <returns>图片中非透明色部分的区域</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineByRng(System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            在指定的区域中无方向检测出线段，成功检测返回true，否则返回false，无问题！
            </summary>
            <param name="rgn"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCircleByRng(System.Drawing.Region,KellImageProcess.AccessPixel.InOutDirection,System.Int32,System.Byte,System.Boolean,System.Drawing.PointF@,System.Double@)">
            <summary>
            在指定的区域中有方向检测出圆，成功检测返回true，否则返回false
            </summary>
            <param name="rgn"></param>
            <param name="dir">如果可以尽量采用In方向（即从外到内），准确度会更高</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="center"></param>
            <param name="rand"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetArcByRng(System.Drawing.Region,KellImageProcess.AccessPixel.InOutDirection,System.Int32,System.Byte,System.Boolean,System.Drawing.PointF@,System.Double@,System.Single@,System.Single@)">
            <summary>
            在指定的区域中有方向检测出弧，成功检测返回true，否则返回false
            </summary>
            <param name="rgn"></param>
            <param name="dir"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="center"></param>
            <param name="rand"></param>
            <param name="startA"></param>
            <param name="sweepA"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRectByRng(System.Drawing.Region,KellImageProcess.AccessPixel.InOutDirection,System.Int32,System.Byte,System.Boolean,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@,System.Collections.Generic.List{System.Drawing.PointF}@)">
            <summary>
            在指定的区域中有方向检测出矩形，成功检测返回true，否则返回false
            </summary>
            <param name="rgn"></param>
            <param name="dir"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="pp1"></param>
            <param name="pp2"></param>
            <param name="pp3"></param>
            <param name="pp4"></param>
            <param name="rectPs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRectangle4P(System.Drawing.PointF[],System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            从检测到的点集中选取矩形的四点
            </summary>
            <param name="ps"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Dotmultiply(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            求平面向量的点积，并可以根据返回值判断向量的夹角是锐是直还是钝
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p0"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Get4PFromRectangle(System.Drawing.PointF[])">
            <summary>
            根据矩形点集获取四个顶点（驻点）
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.PanDuanXiangXian(System.Single,System.Single,System.Single,System.Single,System.Double)">
            <summary>
             判断象限
            </summary>
            <param name="a1">圆心X坐标</param>
            <param name="b1">圆心Y坐标</param>
            <param name="a2">任意X坐标</param>
            <param name="b2">任意Y坐标</param>
            <param name="rand">半径</param>
            <returns>返回任意点在圆中的角度值</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetFangXiangJiao(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
             获取任意点somePoint相对于指定点center的方向角
            </summary>
            <param name="center">指定点</param>
            <param name="somePoint">任意点</param>
            <returns>返回圆上的任意点在圆中的角度值，逆时针方向为正</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Rotate(System.Drawing.PointF,System.Double,System.Drawing.PointF)">
            <summary>
            返回点p以点o为圆心逆时针旋转alpha(单位：弧度)后所在的位置
            </summary>
            <param name="o"></param>
            <param name="alpha"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetArc3P(System.Drawing.RectangleF,System.Single,System.Single,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            根据弧的参数，获取弧上的标准三点（即：始点p1、中点p2、终点p3）
            </summary>
            <param name="rect"></param>
            <param name="startA"></param>
            <param name="sweepA"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetArc(System.Drawing.Point[],System.Drawing.Rectangle@,System.Single@,System.Single@)">
            <summary>
            多点定弧
            </summary>
            <param name="ps"></param>
            <param name="rect"></param>
            <param name="startA"></param>
            <param name="sweepA"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetArc(System.Drawing.PointF[],System.Drawing.RectangleF@,System.Single@,System.Single@)">
            <summary>
            多点定弧
            </summary>
            <param name="ps"></param>
            <param name="rect"></param>
            <param name="startA"></param>
            <param name="sweepA"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCircle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point@,System.Double@)">
            <summary>
            三点定圆
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="cc"></param>
            <param name="cr"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCircle(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@,System.Double@)">
            <summary>
            三点定圆
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="cc"></param>
            <param name="cr"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCircle(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.PointF@,System.Double@)">
            <summary>
            多点拟合圆
            </summary>
            <param name="pts">点集,点集数大于三</param>
            <param name="cen"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCircle(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Double@)">
            <summary>
            多点拟合圆
            </summary>
            <param name="pts">点集,点集数大于三</param>
            <param name="cen"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.PointList2PointFList(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            点数组转换
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.PointFList2PointList(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            点数组转换
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAnyJJ(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            三点决定的角，有顺序性
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAngle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            由两点获取方向角
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            由两点获取方向角
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetArc3P1(System.Drawing.PointF[],System.Drawing.PointF[],System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            获取弧的始点、中点、终点
            </summary>
            <param name="PointList1">左半区域检测到的点集</param>
            <param name="PointList2">右半区域检测到的点集</param>
            <param name="StartP"></param>
            <param name="MiddleP"></param>
            <param name="EndP"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantPsByBright(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            从给定的位图中利用自适应算法获取最清晰的(不一定是最亮的)点集，注意：minRect>=step
            Bright效果比Gray好
            </summary>
            <param name="bmp">位图</param>
            <param name="step">步长>=1</param>
            <param name="minRect">检测框大小>=2</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantPsByGray(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            从给定的位图中利用自适应算法获取最清晰的(不一定是最亮的)点集，注意：minRect>=step
            Gray效果没有Bright好
            </summary>
            <param name="bmp">位图</param>
            <param name="step">步长>=1</param>
            <param name="minRect">检测框大小>=2</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAutoFitTrenchant(System.Int32)">
            <summary>
            基色分量的自适应灰度值，范围[0,255]
            </summary>
            <param name="RGB">R=2,G=1,B=0,其它值为Gray</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAutoFitTrenchantByBright(System.Drawing.Bitmap)">
            <summary>
            亮度自适应值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAutoFitTrenchantByGray(System.Drawing.Bitmap)">
            <summary>
            灰度自适应值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantBitmapByBright(System.Collections.Generic.List{System.Drawing.Bitmap},System.Int32)">
            <summary>
            从给定的位图数组中获取最清晰的一张
            Bright效果比Gray好
            </summary>
            <param name="bitMaps">位图数组</param>
            <param name="size">清晰度检测正方形区域的宽度</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTheMaxTrenchantBitmapByGray(System.Collections.Generic.List{System.Drawing.Bitmap},System.Int32)">
            <summary>
            从给定的位图数组中获取最清晰的一张
            Gray效果没有Bright好
            </summary>
            <param name="bitMaps">位图数组</param>
            <param name="size">清晰度检测正方形区域的宽度</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTrenchant(System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的清晰度[0.0,1.0]
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTrenchant(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的清晰度[0.0,1.0]，最新算法
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTrenchantByBrightness(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的清晰度(改进算法)[0.0,1.0]，较省时
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTrenchantByBrightness1(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的清晰度(改进算法1)[0.0,1.0]，较耗时
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetTrenchantByGray(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的清晰度(改进算法)
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrast(System.Drawing.Rectangle)">
            <summary>
            在水平和垂直两个方向上取亮度的对比反差即清晰度（应该用减法而非除法）的最大值[0.0,1.0]
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByBrightness(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            改进的清晰度基算法[0.0,1.0]，较省时
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByBrightness1(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            改进的清晰度基算法1[0.0,1.0]，较耗时
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByBrightness(System.Drawing.Bitmap)">
            <summary>
            改进的清晰度基算法[0.0,1.0]，较省时
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByBrightness1(System.Drawing.Bitmap)">
            <summary>
            改进的清晰度基算法1[0.0,1.0]，较耗时
            </summary>
            <param name="bmp">位图</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByGray(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            改进的清晰度基算法(最新)
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetOneContrastByGray(System.Drawing.Bitmap)">
            <summary>
            改进的清晰度基算法(最新)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetGray(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的灰度
            </summary>
            <param name="bmp">位图</param>
            <param name="rect">指定区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetGray">
            <summary>
            获取位图的灰度
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetGray(System.Drawing.Bitmap)">
            <summary>
            获取位图的灰度
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidGray(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的灰度中值
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidGray(System.Drawing.Bitmap)">
            <summary>
            获取位图的灰度中值
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBrightness">
            <summary>
            获取位图的亮度
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBrightness(System.Drawing.Bitmap)">
            <summary>
            获取位图的亮度
            </summary>
            <param name="bmp">位图</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBrightness(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的亮度
            </summary>
            <param name="bmp">位图</param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidBrightness(System.Drawing.Rectangle)">
            <summary>
            获取位图中指定区域的灰度中值
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidBrightness">
            <summary>
            获取位图的灰度中值
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindEdge(System.Drawing.Rectangle,System.Int32,System.Byte)">
            <summary>
            根据blkORwht, threshold是否找到边缘
            </summary>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindEdge(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            根据color是否找到边缘
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBmpFromPs(System.Drawing.Point[],System.Int32)">
            <summary>
            根据点集生成二值位图(因为三重循环的缘故，速度太慢，留待以后改进)
            </summary>
            <param name="ps"></param>
            <param name="blkORwht">点集为黑还是白，0为黑，非0则为白</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBmpFromPs(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            根据点集生成彩色位图(因为三重循环的缘故，速度太慢，留待以后改进)
            </summary>
            <param name="ps"></param>
            <param name="color">输出点集的颜色</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RemovePs(System.Drawing.Point[],System.Int32)">
            <summary>
            移除点集中指定索引的一个点
            </summary>
            <param name="ps"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GrayHistogram(System.Drawing.Bitmap)">
            <summary>
            灰度直方图的灰度值百分比数组(256个元素，元素值的取值范围[0, 100])
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Histogram(System.Drawing.Image,KellImageProcess.HistogramType)">
            <summary>
            获取给定图片的指定通道下的直方图，返回直方图的大小为[256, 256]
            </summary>
            <param name="img"></param>
            <param name="hst"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Opacitize(System.Drawing.Bitmap,System.Byte)">
            <summary>
            透明化
            </summary>
            <param name="bmp"></param>
            <param name="transparent">透明度，范围[0, 255]</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.InitArray(System.Int32,System.Int32,System.Byte)">
            <summary>
            初始化一个整型二维数组
            </summary>
            <param name="width">数组宽</param>
            <param name="height">数组高</param>
            <param name="init">初始值</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.InitArray(System.Int32,System.Int32,System.Single)">
            <summary>
            初始化一个浮点二维数组
            </summary>
            <param name="width">数组宽</param>
            <param name="height">数组高</param>
            <param name="init">初始值</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.InitArray(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            初始化一个颜色数组
            </summary>
            <param name="width">数组宽</param>
            <param name="height">数组高</param>
            <param name="init">初始值</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Linking(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            连通
            </summary>
            <param name="inputPs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Linking(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            连通
            </summary>
            <param name="inputPs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetThinningMidPs(System.Collections.Generic.List{System.Int32})">
            <summary>
            取要细化点集的中点的脚标(1个或2个)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetThinningMidPs1(System.Collections.Generic.List{System.Int32})">
            <summary>
            取要细化点集的中点的X或Y值(1个)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetThinningMidPs1(System.Collections.Generic.List{System.Single})">
            <summary>
            取要细化点集的中点的X或Y值(1个)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Thinning(System.Drawing.Point[])">
            <summary>
            细化 ---- 暂时无效
            </summary>
            <param name="inputPs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs1(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            取点集的中间点（如弧线、直线的中点，与原点集的分布有关且与分布的疏密有关，有修正功能）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs1(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            取点集的中间点（如弧线、直线的中点，与原点集的分布有关且与分布的疏密有关，有修正功能）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs2(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            取点集的中间点（返回点一定在原点集上，与原点集的分布无关）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs2(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            取点集的中间点（返回点一定在原点集上，与原点集的分布无关）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs3(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            取点集的中间点（与原点集的分布有关，但与分布的疏密无关）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPointOfPs3(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            取点集的中间点（与原点集的分布有关，但与分布的疏密无关）
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RectangleOnMorePoint(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            点集的外包正规矩形
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RectangleOnMorePoint(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            点集的外包正规矩形
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRangePoints(System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Int32)">
            <summary>
            取点集的指定范围点集（返回点集一定在原点集上，与原点集的分布无关）
            </summary>
            <param name="ps"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns>返回点集，错误的范围索引则返回null</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRangePoints(System.Collections.Generic.List{System.Drawing.PointF},System.Int32,System.Int32)">
            <summary>
            取点集的指定范围点集（返回点集一定在原点集上，与原点集的分布无关）
            </summary>
            <param name="ps"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns>返回点集，错误的范围索引则返回null</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetKeyPs(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            取关键点
            </summary>
            <param name="bmp">要检测的位图</param>
            <param name="rect">检测区域</param>
            <param name="blkORwht">0为黑边，非0为白边</param>
            <param name="threshold">灰度阀值</param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetKeyPs(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            取关键点
            </summary>
            <param name="bmp">要检测的位图</param>
            <param name="path">检测路径</param>
            <param name="blkORwht">0为黑边，非0为白边</param>
            <param name="threshold">灰度阀值</param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetKeyPs(System.Drawing.Bitmap,System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            取关键点
            </summary>
            <param name="bmp">要检测的位图</param>
            <param name="region">检测区域</param>
            <param name="blkORwht">0为黑边，非0为白边</param>
            <param name="threshold">灰度阀值</param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FastClipBitmap(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            快速剪裁指定路径的位图
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetEdgeByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Byte)">
            <summary>
            获取指定黑边(或白边)以threshold阀值呈现出来的边缘点集(指定路径)
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetEdgeByRect(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte)">
            <summary>
            获取指定黑边(或白边)以threshold阀值呈现出来的边缘点集(指定区域)
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetEdge(System.Drawing.Bitmap,System.Byte)">
            <summary>
            获取指定黑边(或白边)以threshold阀值呈现出来的边缘点集(全位图)
            </summary>
            <param name="bmp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetEdgeBmpByRect(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte)">
            <summary>
            获取指定黑边(或白边)以threshold阀值呈现出来的边缘位图(指定路径)
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPoint4(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测整张位图在指定黑边(或白边)以threshold为阀值的情况下，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByRect4(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域中，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByPath4(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的路径下，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByRegion4(System.Drawing.Bitmap,System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域中，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="region"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPoint9(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测整张位图在指定黑边(或白边)以threshold为阀值的情况下，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByRect9(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域中，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByPath9(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的路径下，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistKeyPointByRegion9(System.Drawing.Bitmap,System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域中，是否存在关键点
            </summary>
            <param name="bmp"></param>
            <param name="region"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="needFilter"></param>
            <param name="needEdgeDetect"></param>
            <param name="edgeThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistLinkedRoadByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的路径下，是否存在连通路径，并返回连通的路径
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="isCZ"></param>
            <param name="linkedRoad"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsExistLinkedWayByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            用轮廓提取的方法寻找所有合适路径
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="isCZ"></param>
            <param name="linkedRoad"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.CheckWayLinked(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte,System.Boolean,System.Drawing.Point,System.Boolean,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            确定水平或垂直方向的关键点路径跟踪
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExtend"></param>
            <param name="rec"></param>
            <param name="isCZ"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindWay(System.Boolean[0:,0:],System.Int32,System.Int32)">
            <summary>
            用次方法之前要先置空tmpPoints
            </summary>
            <param name="p"></param>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.PathIsRect(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            判断给定的路径是否为正矩形
            </summary>
            <param name="path">给定的路径</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.dist(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            平面中两点的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.cosine(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            返回两个矢量l1和l2的夹角的余弦(-1 --- 1)注意：如果想从余弦求夹角的话，注意反余弦函数的定义域是从 0到pi
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Multiply(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            求平面向量的叉积，并可以根据返回值判断三点的位置关系
            r》0:ep在向量op-sp的逆时针方向；
            r==0:op-sp-ep三点共线；
            r《0:ep在向量op-sp的顺时针方向
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Graham_Scan(KellImageProcess.Point2[])">
            <summary>
            获取点集的Graham扫描凸包壳，返回凸包上的点集按照逆时针方向排列（没问题！只是会忽略一个点）
            </summary>
            <param name="PointSet"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.ConvexClosure(KellImageProcess.Point2[])">
            <summary>
            卷包裹法求点集凸壳（有问题...）
            </summary>
            <param name="PointSet"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindTheMinYPoint(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            寻找点集中Y极小、X极大的点
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.FindTheMinYPoint(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            寻找点集中Y极小、X极大的点
            </summary>
            <param name="ps">点集</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAngleValue(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            返回顶角在o点，起始边为os，终止边为oe的夹角(单位：弧度)
            </summary>
            <param name="o"></param>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetAngleValue(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            返回顶角在o点，起始边为os，终止边为oe的夹角(单位：弧度)
            </summary>
            <param name="o"></param>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RemoveAOP(System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            移除凹点
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Multiply(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            r《0:ep在向量op-sp的逆时针方向，r==0:op-sp-ep三点共线，r》0:ep在向量op-sp的顺时针方向，注意方向是以小于180度的哪个方向为准，op为旋转中心
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsSimple(System.Drawing.Point[])">
            <summary>
            输入的多边形是否为简单多边形
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.intersect(KellImageProcess.AccessPixel.Line2D,KellImageProcess.AccessPixel.Line2D)">
            <summary>
            如果线段u和v相交(包括相交在端点处)时，返回true
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns> 
        </member>
        <member name="M:KellImageProcess.AccessPixel.CheckConvex(System.Drawing.Point[],System.Boolean[]@)">
            <summary>
            返回值：按输入顺序返回多边形顶点的凸凹性判断，bc[i]=true,iff:第i个顶点是凸顶点
            </summary>
            <param name="polygon"></param>
            <param name="bc"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsConvex(System.Drawing.Point[])">
            <summary>
            返回值：多边形polygon是凸多边形时，返回true 
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Area_of_polygon(System.Drawing.Point[])">
            <summary>
            返回多边形面积(signed)；输入顶点按逆时针排列时，返回正值；否则返回负值
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsConterClock(System.Drawing.Point[])">
            <summary>
            如果输入顶点按逆时针排列，返回true
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsCCwize(System.Drawing.Point[])">
            <summary>
            另一种判断多边形顶点排列方向的方法，逆时针为true
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCenterPointByRectTB(System.Drawing.Rectangle,System.Int32,System.Byte)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域下的 凸包 所在Rectangle的中点(不处理透明/半透明像素)，并返回指定路径中去噪后的小位图
            </summary>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCenterPointByPath(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的路径下关键点集的中点(不处理透明/半透明像素)
            </summary>
            <param name="bmp"></param>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCenterPointByRect(System.Drawing.Rectangle,System.Int32,System.Byte)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的区域下关键点集的中点(不处理透明/半透明像素)，并返回指定路径中去噪后的小位图
            </summary>
            <param name="rect"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetCenterPointByPathTB(System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Byte)">
            <summary>
            检测指定黑边(或白边)以threshold阀值在指定的路径下的 凸包 所在Rectangle的中点(不处理透明/半透明像素)，并返回指定路径中去噪后的小位图
            </summary>
            <param name="path"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineNoDirection(System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            无方向的线检测（返回直线的两点），有问题...
            </summary>
            <param name="rgn"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineByDirection(System.Drawing.Region,System.Int32,System.Byte,System.Boolean,System.Double,System.Byte,System.Drawing.PointF@,System.Drawing.PointF@,System.Collections.Generic.List{System.Drawing.PointF}@)">
            <summary>
            有方向的线检测（返回直线的两点）
            </summary>
            <param name="rgn"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="needGrayExt"></param>
            <param name="angle"></param>
            <param name="step">步长必须大于0</param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="linePs"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPointListsByDir(System.Drawing.Bitmap,System.Int32,System.Drawing.Region,System.Double,System.Byte)">
            <summary>
            获得点集序列数组ArrayList(List{PointF}>,List{PointF},List{PointF},...)，其中每一个List{PointF}是该方向上的一条扫描线所经过的关键点集，直线方向在[135，180]或[315，360]的范围内 有问题...
            </summary>
            <param name="bmp">位图</param>
            <param name="blkORwht">取白点1还是黑点0</param>
            <param name="rgn">区域</param>
            <param name="angle">方向角度，单位：弧度</param>
            <param name="step">步长，必须大于0</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPointListsByDirection(System.Drawing.Bitmap,System.Int32,System.Byte,System.Drawing.Region,System.Double)">
            <summary>
            获得点集序列数组ArrayList(List{PointF},List{PointF},List{PointF},...)，其中每一个List{PointF}是该方向上的一条扫描线所经过的关键点集，有问题...
            </summary>
            <param name="bmp">位图</param>
            <param name="blkORwht">取白点1还是黑点0</param>
            <param name="threshold">阈值</param>
            <param name="rgn">区域</param>
            <param name="angle">方向角度，单位：弧度</param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPLDistance(System.Double,System.Double,System.Drawing.Point)">
            <summary>
            获得点p到直线的距离。直线为：k*x-y+b= 0
            </summary>
            <param name="k">直线斜率</param>
            <param name="b">参数b</param>
            <param name="p">点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetReverseList(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            获取逆序点数组
            </summary>
            <param name="al">临时点数组</param>
            <returns>返回获取的点数组</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLine1(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            改进的多点取线
            </summary>
            <param name="ps"></param>
            <param name="startP"></param>
            <param name="endP"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLine1(System.Collections.Generic.List{System.Drawing.Point},System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            改进的多点取线
            </summary>
            <param name="ps"></param>
            <param name="startP"></param>
            <param name="endP"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Tpoint(System.Drawing.PointF,System.Drawing.PointF)">
             <summary>
            求两点的矩离
             </summary>
             <param name="a">第一点</param>
             <param name="b">第二点</param>
             <returns>返回两点的矩离</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RectangleOnMorePoint1(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            点集的外包矩阵
            </summary>
            <param name="pfs">点集</param>
            <returns>正规矩阵的四个顶点,顺时钟</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.RectangleOnMorePoint1(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            点集的外包矩阵
            </summary>
            <param name="pfs">点集</param>
            <returns>正规矩阵的四个顶点,顺时钟</returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Pvint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            过直线外一点的在直线上的垂足
            </summary>
            <param name="pt">直线外的一点</param>
            <param name="lt1">直线上的一点</param>
            <param name="lt2">直线上的另一点</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLine(System.Collections.Generic.List{System.Drawing.PointF},System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            直线拟合算法，多点点分布定线
            </summary>
            <param name="ps"></param>
            <param name="startP"></param>
            <param name="endP"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Distance2D(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            两点之间的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Distance2D(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            两点之间的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Distance3D(KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            两点之间的距离
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetRectangleCenter(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            求矩形中心
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="center"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPsLength(System.Drawing.Point[])">
            <summary>
            获取有序点集构造封闭曲线(凸多边形)的周长，注意：有序
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.IsNeg(System.Int32)">
            <summary>
            偶数为正，奇数为负
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Met(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            获取矩阵D在i行j列的子矩阵
            </summary>
            <param name="D"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Det(System.Double[0:,0:])">
            <summary>
            获取矩阵的行列式值
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetPsMJ(System.Drawing.Point[])">
            <summary>
            凸多边形(封闭曲线)的面积
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Rect4thP(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            已知平行四边形的三个顶点(a,b,c)，计算第四个顶点d的坐标. 注意：已知的三个顶点可以是有序的，b为中间点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Rect4thP(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            已知平行四边形的三个顶点(a,b,c)，计算第四个顶点d的坐标. 注意：已知的三个顶点可以是有序的，b为中间点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBoundFromPs(System.Drawing.Point[],System.Drawing.Point[]@)">
            <summary>
            返回点集决定的矩形区域，以及点集中距离最远的两点的方向
            </summary>
            <param name="ps"></param>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBoundFromPs(System.Drawing.PointF[],System.Drawing.PointF[]@)">
            <summary>
            返回点集决定的矩形区域，以及点集中距离最远的两点的方向
            </summary>
            <param name="ps"></param>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineMinMaxX(System.Drawing.Point[])">
            <summary>
            获取点集在X方向的最大最小值
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineMinMaxX(System.Drawing.PointF[])">
            <summary>
            获取点集在X方向的最大最小值
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineMinMaxY(System.Drawing.Point[])">
            <summary>
            获取点集在Y方向的最大最小值
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetLineMinMaxY(System.Drawing.PointF[])">
            <summary>
            获取点集在Y方向的最大最小值
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.LinkMidPoint(System.Drawing.Point[])">
            <summary>
            连中点
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.LinkMidPoint(System.Drawing.PointF[])">
            <summary>
            连中点
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPoint(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            获取两点的中点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetMidPoint(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            获取两点的中点
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBmpByRoberts(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            带区域的Roberts算子边缘检测
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBitBmpByRoberts(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            带区域的Roberts算子二值边缘检测
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBitBmpByRoberts(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte,System.Boolean)">
            <summary>
            带区域的Roberts算子二值边缘检测
            </summary>
            <param name="b"></param>
            <param name="rect"></param>
            <param name="threshold"></param>
            <param name="needThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBmpByRoberts(System.Drawing.Bitmap)">
            <summary>
            Roberts算子边缘检测
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBitBmpByRoberts(System.Drawing.Bitmap)">
            <summary>
            Roberts算子二值边缘检测
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.GetBitBmpByRoberts(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            Roberts算子二值边缘检测
            </summary>
            <param name="b"></param>
            <param name="threshold"></param>
            <param name="needThinning"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Brighten(System.Drawing.Color)">
            <summary>
            亮化
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Darken(System.Drawing.Color)">
            <summary>
            暗化
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Gray(System.Drawing.Bitmap)">
            <summary>
            灰度化
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Gray">
            <summary>
            灰度化
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.BinaryImage(System.Byte[0:,0:],System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            将二值数组转换为双色位图流
            </summary>
            <param name="GrayArray">二值数组</param>
            <param name="pf">位图的像素格式</param>
            <param name="bgColor">背景色</param>
            <param name="fgColor">前景色</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Image2Array(System.Drawing.Bitmap,System.Int32,System.Byte)">
            <summary>
            将位图流转换为二维布尔数组
            </summary>
            <param name="b"></param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Image2Array(System.Drawing.Bitmap)">
            <summary>
            将位图流转换为二维数组
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.BinaryArray(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            将位图流转换为二值数组
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阈值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Bitize(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            二值化
            </summary>
            <param name="bmp">位图流</param>
            <param name="threshold">阈值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.AutoFitBitize(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            自适应二值化，但效果不是很理想
            </summary>
            <param name="b"></param>
            <param name="isTwoPeek"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.AccessPixel.Smooth(System.Drawing.Bitmap)">
            <summary>
            对图像进行平滑处理
            </summary>
            <param name="b">位图流</param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.AccessPixel.CurrentThreshold">
            <summary>
            获取当前位图前背景的灰度阀值
            </summary>
        </member>
        <member name="P:KellImageProcess.AccessPixel.Bitmap">
            <summary>
            访问或处理的位图
            </summary>
        </member>
        <member name="P:KellImageProcess.AccessPixel.HistogramValues">
            <summary>
            直方图各灰度使用量数组，元素值的取值范围[0, 100](百分比%)
            </summary>
        </member>
        <member name="T:KellImageProcess.AccessPixel.InOutDirection">
            <summary>
            从外到内或由内而外的方向枚举
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.InOutDirection.In">
            <summary>
            从外到内
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.InOutDirection.Out">
            <summary>
            由内而外
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.InOutDirection.Other">
            <summary>
            其它方向
            </summary>
        </member>
        <member name="T:KellImageProcess.AccessPixel.LAD">
            <summary>
            点角度距离结构
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.LAD.Location">
            <summary>
            点
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.LAD.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.LAD.Distance">
            <summary>
            距离
            </summary>
        </member>
        <member name="M:KellImageProcess.AccessPixel.LAD.#ctor(System.Drawing.Point,System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="Location"></param>
            <param name="Angle"></param>
            <param name="Distance"></param>
        </member>
        <member name="T:KellImageProcess.AccessPixel.AngleSort">
            <summary>
            角度排序类
            </summary>
        </member>
        <member name="T:KellImageProcess.AccessPixel.DistanceSort">
            <summary>
            距离排序类
            </summary>
        </member>
        <member name="T:KellImageProcess.AccessPixel.Line2D">
            <summary>
            二维线结构
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.Line2D.Point1">
            <summary>
            线上的一点
            </summary>
        </member>
        <member name="F:KellImageProcess.AccessPixel.Line2D.Point2">
            <summary>
            线上的另一点
            </summary>
        </member>
        <member name="T:KellImageProcess.TestNumeric">
            <summary>
            数字测试类
            </summary>
        </member>
        <member name="M:KellImageProcess.TestNumeric.IsNumeric(System.String)">
            <summary>
            是否为数字组合
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.TestNumeric.IsInt(System.String)">
            <summary>
            是否为整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.TestNumeric.IsPosInt(System.String)">
            <summary>
            是否为正整数，不同于IsNumeric()
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.TestNumeric.IsReal(System.String)">
            <summary>
            是否为实数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.TestNumeric.IsPosReal(System.String)">
            <summary>
            是否为正实数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.Vector2">
            <summary>
            二维向量
            </summary>
        </member>
        <member name="M:KellImageProcess.Vector2.CompareEps(System.Double,System.Double)">
            <summary>
            判断在给定的误差范围内两个数值是否相等
            </summary>
            <param name="comp1"></param>
            <param name="comp2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Vector2.#ctor(KellImageProcess.Point2)">
            <summary>
            始点为原点，终点为p的向量
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:KellImageProcess.Vector2.#ctor(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            始点为startP，终点为endP的向量
            </summary>
            <param name="startP"></param>
            <param name="endP"></param>
        </member>
        <member name="M:KellImageProcess.Vector2.op_Addition(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            加法操作符
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.op_Subtraction(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            减法操作符
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Formatting(KellImageProcess.Vector2)">
            <summary>
            规范化
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.IsEqual(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            是否相等
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.ToString">
            <summary>
            将向量转化为可视化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetLength(KellImageProcess.Vector2)">
            <summary>
            长度(模)
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetPointOfLengthFormStartP(KellImageProcess.Vector2,System.Double)">
            <summary>
            获取直线上距离开始点len的点
            </summary>
            <param name="vector">直线的向量</param>
            <param name="len">距离</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Scale(KellImageProcess.Vector2,System.Double)">
            <summary>
            缩放
            </summary>
            <param name="vector"></param>
            <param name="scalingFactor"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetUnitVector(KellImageProcess.Vector2)">
            <summary>
            单位向量
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetJJ(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            根据有序三点(中间点为顶点)获取角度(0,180)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetJJ(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            两向量的夹角[0,180)
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCross(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            获取两直线的交点
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCross(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
            获取两直线的交点
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.CeShi4DianHuaJiao(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            检测画角的4点条件是否符合。
            </summary>    
            <param name="x1">画角第一点X轴坐标</param>
            <param name="y1">画角第一点Y轴坐标</param>
            <param name="x2">画角第二点X轴坐标</param>
            <param name="y2">画角第二点Y轴坐标</param>
            <param name="x3">画角第三点X轴坐标</param>
            <param name="y3">画角第三点Y轴坐标</param>
            <param name="x4">画角第四点Y轴坐标</param>
            <param name="y4">画角第四点Y轴坐标</param>
            <returns>返回画角类型值</returns>
        </member>
        <member name="M:KellImageProcess.Vector2.HuChuJiaoDian(KellImageProcess.Vector2,KellImageProcess.Vector2,KellImageProcess.Point2@)">
            <summary>
            返回呼出交点的数组
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="pf"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCross(KellImageProcess.Vector2,KellImageProcess.Vector2,KellImageProcess.Point2@)">
            <summary>
            获取两直线的交点
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="cross"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCross(KellImageProcess.Line2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            获取两线段的交点，有问题，因为该算法是延长线的交点
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="cross"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Parallel(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            两向量是否平行
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Perpendicular(KellImageProcess.Vector2,KellImageProcess.Vector2)">
            <summary>
            两向量是否垂直
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Transform(KellImageProcess.Vector2,KellImageProcess.Point2)">
            <summary>
            平移(正方向)
            </summary>
            <param name="vector"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Transform(KellImageProcess.Vector2,System.Double)">
            <summary>
            旋转(顺时针)
            </summary>
            <param name="vector"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.Rotation(KellImageProcess.Point2,System.Double)">
            <summary>
            求点p经过旋转弧度a之后的新点坐标
            </summary>
            <param name="p"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetTransformation(KellImageProcess.Point2,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            综合转换
            </summary>
            <param name="srcPt"></param>
            <param name="tX"></param>
            <param name="tY"></param>
            <param name="sX"></param>
            <param name="sY"></param>
            <param name="Theta">以弧度计量的角度</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.BaseToSystem(KellImageProcess.Vector2,System.Double[0:,0:])">
            <summary>
            基于指定基矩阵的向量
            </summary>
            <param name="vector">原向量</param>
            <param name="baseMatrix">基矩阵</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.IsNeg(System.Int32)">
            <summary>
            偶数为正，奇数为负
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetInverseMatrix(System.Double[0:,0:])">
            <summary>
            求逆阵
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.LineToVector(KellImageProcess.Line2)">
            <summary>
            线转化为向量
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.VectorToLine(KellImageProcess.Vector2)">
            <summary>
            向量转化为线
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCZAVGLine(KellImageProcess.Line2)">
            <summary>
            求垂直平分线，第一个点Point1即为垂足，且长度为1
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetEndPofLineK(KellImageProcess.Point2,System.Double,System.Double)">
            <summary>
            根据线段的始点、角度和长度，确定线段的正向终点
            </summary>
            <param name="startP"></param>
            <param name="angle">弧度为单位</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetEndPofLine_K(KellImageProcess.Point2,System.Double,System.Double)">
            <summary>
            根据线段的始点、角度和长度，确定线段的反向终点
            </summary>
            <param name="startP"></param>
            <param name="angle">弧度为单位</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetCZLine(KellImageProcess.Point2,KellImageProcess.Line2,System.Boolean@)">
            <summary>
            求过点p垂直于line的垂直线，第一个点Point1即为垂足，长度为1 注意：这个函数非常重要！很多地方都用上！
            </summary>
            <param name="p"></param>
            <param name="line"></param>
            <param name="ifInLine"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.InLine(KellImageProcess.Point2,KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            X是否在AB所在的直线上
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector2.GetAngleAvgLine(KellImageProcess.Vector2,KellImageProcess.Vector2,KellImageProcess.Vector2@)">
            <summary>
            求角平分线(中分线)，v1,v2不能单位化，否则有误。
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="avgLine"></param>
        </member>
        <member name="M:KellImageProcess.Vector2.GetAngleAvgLine(KellImageProcess.Line2,KellImageProcess.Line2,KellImageProcess.Line2@)">
            <summary>
            求角平分线(中分线)
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="avgLine"></param>
        </member>
        <member name="P:KellImageProcess.Vector2.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector2.Start">
            <summary>
            获取或设置向量的始点
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector2.End">
            <summary>
            获取或设置向量的终点
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector2.Empty">
            <summary>
            空向量
            </summary>
        </member>
        <member name="T:KellImageProcess.Vector3">
            <summary>
            三维向量
            </summary>
        </member>
        <member name="M:KellImageProcess.Vector3.CompareEps(System.Double,System.Double)">
            <summary>
            判断在给定的误差范围内两个数值是否相等
            </summary>
            <param name="comp1"></param>
            <param name="comp2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Vector3.#ctor(KellImageProcess.Point3)">
            <summary>
            始点为原点，终点为p的向量
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:KellImageProcess.Vector3.#ctor(KellImageProcess.Point3,KellImageProcess.Point3,System.Boolean)">
            <summary>
            如果pointDirection为true，则start = new Point3(0, 0, 0);end = startP;x0point = endP;
            </summary>
            <param name="startP"></param>
            <param name="endP"></param>
            <param name="pointDirection"></param>
        </member>
        <member name="M:KellImageProcess.Vector3.op_Addition(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            加法操作符
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.op_Subtraction(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            减法操作符
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Formatting(KellImageProcess.Vector3)">
            <summary>
            规范化
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.IsEqual(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            是否相等
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.ToString">
            <summary>
            将向量转化为可视化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetLength(KellImageProcess.Vector3)">
            <summary>
            长度(模)
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetPointOfLengthFormStartP(KellImageProcess.Vector3,System.Double)">
            <summary>
            获取直线上距离开始点len的点，可能有问题...
            </summary>
            <param name="vector">直线的向量</param>
            <param name="len">距离</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Scale(KellImageProcess.Vector3,System.Double)">
            <summary>
            缩放
            </summary>
            <param name="vector"></param>
            <param name="scalingFactor"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetUnitVector(KellImageProcess.Vector3)">
            <summary>
            单位向量
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetAngleX(KellImageProcess.Vector3)">
            <summary>
            获取当前向量与X轴的夹角
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetAngleY(KellImageProcess.Vector3)">
            <summary>
            获取当前向量与Y轴的夹角
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetAngleZ(KellImageProcess.Vector3)">
            <summary>
            获取当前向量与Z轴的夹角
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetVectorsAngle(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            两向量的夹角
            </summary>
            <param name="vector1"></param>
            <param name="vector2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Vector3ToVector2(KellImageProcess.Vector3)">
            <summary>
            3维转化为2维
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetJJ(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            两向量的夹角[0,180)
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.IsLineCross(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            判断两线段是否相交，v1,v2不能格式化，否则有误
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.IsVectorCross(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            判断两直线是否相交，v1,v2不能格式化，否则有误
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Between(System.Double,System.Double,System.Double)">
            <summary>
            范围
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetCoefAndConsFrom2Vectors(KellImageProcess.Vector3,KellImageProcess.Vector3,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
            由直线的端点获取直线的方程组系数矩阵以及常数矩阵，注：coef[4,3], cons[4]
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="coef"></param>
            <param name="cons"></param>
        </member>
        <member name="M:KellImageProcess.Vector3.GetCross(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            获取两直线的交点，v1,v2不能格式化，否则有误
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetCross(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            获取两线段的交点
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Parallel(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            两向量是否平行
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Perpendicular(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            两向量是否垂直
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Transform(KellImageProcess.Vector3,KellImageProcess.Point3)">
            <summary>
            平移(正方向)
            </summary>
            <param name="vector"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Transform(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            旋转(顺时针)
            </summary>
            <param name="vector"></param>
            <param name="baseVector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetVectorFrom2Faces(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            两面交线
            </summary>
            <param name="A1"></param>
            <param name="B1"></param>
            <param name="C1"></param>
            <param name="D1"></param>
            <param name="A2"></param>
            <param name="B2"></param>
            <param name="C2"></param>
            <param name="D2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.LineToVector(KellImageProcess.Line3)">
            <summary>
            线转化为向量
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.VectorToLine(KellImageProcess.Vector3)">
            <summary>
            向量转化为线
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetProjP2L(KellImageProcess.Point3,KellImageProcess.Line3)">
            <summary>
            点在线上的投影
            </summary>
            <param name="point"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetProjP2L(KellImageProcess.Point3,KellImageProcess.Vector3)">
            <summary>
            点在线上的投影
            </summary>
            <param name="point"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetProjP2F(KellImageProcess.Point3,KellImageProcess.Face)">
            <summary>
            点在面上的投影
            </summary>
            <param name="point"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetProjL2L(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            线在线上的投影
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetProjL2F(KellImageProcess.Line3,KellImageProcess.Face)">
            <summary>
            线在面上的投影
            </summary>
            <param name="line"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetJJL2L(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            线线夹角
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetJJL2F(KellImageProcess.Line3,KellImageProcess.Face)">
            <summary>
            线面夹角
            </summary>
            <param name="line"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetJJF2F(KellImageProcess.Face,KellImageProcess.Face)">
            <summary>
            面面夹角
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.IsNeg(System.Int32)">
            <summary>
            偶数为正，奇数为负
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Met(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            获取矩阵D在i行j列的子矩阵
            </summary>
            <param name="D"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.Det(System.Double[0:,0:])">
            <summary>
            获取矩阵的行列式值
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetRootsByCramer3D(System.Double[0:,0:],System.Double[])">
            <summary>
            求三元一次（线性）方程组的根
            </summary>
            <param name="coef"></param>
            <param name="cons"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetRootsByCramer(System.Double[0:,0:],System.Double[])">
            <summary>
            求多元一次（线性）方程组的根
            </summary>
            <param name="coef"></param>
            <param name="cons"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.CreateTransMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建三维转换矩阵，注：transMtx = new double[4, 3]
            </summary>
            <param name="Rx"></param>
            <param name="Ry"></param>
            <param name="Rz"></param>
            <param name="Sx"></param>
            <param name="Sy"></param>
            <param name="Sz"></param>
            <param name="Tx"></param>
            <param name="Ty"></param>
            <param name="Tz"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetTransformation(KellImageProcess.Point3,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            综合转换
            </summary>
            <param name="srcPt"></param>
            <param name="Rx">以弧度计量的角度(x分量)</param>
            <param name="Ry">以弧度计量的角度(y分量)</param>
            <param name="Rz">以弧度计量的角度(z分量)</param>
            <param name="Sx"></param>
            <param name="Sy"></param>
            <param name="Sz"></param>
            <param name="Tx"></param>
            <param name="Ty"></param>
            <param name="Tz"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.BaseToSystem(KellImageProcess.Vector3,System.Double[0:,0:])">
            <summary>
            基于指定基矩阵的向量
            </summary>
            <param name="vector">原向量</param>
            <param name="baseMatrix">基矩阵</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetInverseMatrix(System.Double[0:,0:])">
            <summary>
            求逆阵
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetCZAVGLine(KellImageProcess.Line3)">
            <summary>
            求垂直平分线，第一个点Point1即为垂足，且长度为1
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetCZLine(KellImageProcess.Point3,KellImageProcess.Line3,System.Boolean@)">
            <summary>
            求过点p垂直于line的垂直线，第一个点Point1即为垂足
            </summary>
            <param name="p"></param>
            <param name="line"></param>
            <param name="ifInLine"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.InLine(KellImageProcess.Point3,KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            X是否在AB所在的直线上
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Vector3.GetPerpendicular(KellImageProcess.Vector3,KellImageProcess.Point3)">
            <summary>
            返回与指定向量vector垂直且经过vector上一定点的平面
            </summary>
            <param name="vector"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Vector3.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector3.Start">
            <summary>
            获取或设置向量的始点
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector3.End">
            <summary>
            获取或设置向量的终点
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector3.X0point">
            <summary>
            向量上的某一点
            </summary>
        </member>
        <member name="P:KellImageProcess.Vector3.Empty">
            <summary>
            空向量
            </summary>
        </member>
        <member name="T:KellImageProcess.Mul">
            <summary>
            乘法类
            </summary>
        </member>
        <member name="M:KellImageProcess.Mul.Sum(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            矩阵的乘法中乘积和
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.MatrixMul(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            矩阵的乘法
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.VectorToMatrix(KellImageProcess.Vector3)">
            <summary>
            向量转化为矩阵
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.MatrixToVector(CSharpAlgorithm.Algorithm.Matrix)">
            <summary>
            矩阵转化为向量
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.GetXmul(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            叉乘，两向量平行的充要条件是叉乘为 (0, 0, 0)
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.ColumeToRow(CSharpAlgorithm.Algorithm.Matrix)">
            <summary>
            列向量转化为行向量
            </summary>
            <param name="X2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.RowToColume(CSharpAlgorithm.Algorithm.Matrix)">
            <summary>
            行向量转化为列向量
            </summary>
            <param name="X2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.GetPmul(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            点乘，两向量垂直的充要条件是点乘为 0
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.MixMul(KellImageProcess.Vector3,KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            混合积，三向量共面的充要条件是混合积为 0
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.Vector2MulMatrix(KellImageProcess.Vector2,System.Double[0:,0:])">
            <summary>
            二维向量与矩阵相乘
            </summary>
            <param name="vector"></param>
            <param name="baseMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Mul.Vector3MulMatrix(KellImageProcess.Vector3,System.Double[0:,0:])">
            <summary>
            三维向量与矩阵相乘
            </summary>
            <param name="vector"></param>
            <param name="baseMatrix"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.Point2">
            <summary>
            二维点
            </summary>
        </member>
        <member name="M:KellImageProcess.Point2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Point2.#ctor(System.Single,System.Single)">
            <summary>
            初始化点
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:KellImageProcess.Point2.IsEqual(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            是否相等
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Point2.ToString">
            <summary>
            将二维坐标点转化为可视化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Point2.Parse(System.String)">
            <summary>
            字符串转化为点
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Point2.X">
            <summary>
            点的X坐标
            </summary>
        </member>
        <member name="P:KellImageProcess.Point2.Y">
            <summary>
            点的Y坐标
            </summary>
        </member>
        <member name="P:KellImageProcess.Point2.ZERO">
            <summary>
            零点
            </summary>
        </member>
        <member name="T:KellImageProcess.Point3">
            <summary>
            三维点
            </summary>
        </member>
        <member name="M:KellImageProcess.Point3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Point3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            初始化点
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:KellImageProcess.Point3.IsEqual(KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            是否相等
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Point3.ToString">
            <summary>
            将三维坐标点转化为可视化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Point3.Parse(System.String)">
            <summary>
            字符串转化为点
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Point3.X">
            <summary>
            点的X坐标
            </summary>
        </member>
        <member name="P:KellImageProcess.Point3.Y">
            <summary>
            点的Y坐标
            </summary>
        </member>
        <member name="P:KellImageProcess.Point3.Z">
            <summary>
            点的Z坐标
            </summary>
        </member>
        <member name="P:KellImageProcess.Point3.ZERO">
            <summary>
            零点
            </summary>
        </member>
        <member name="T:KellImageProcess.Face">
            <summary>
            面
            </summary>
        </member>
        <member name="M:KellImageProcess.Face.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Face.#ctor(KellImageProcess.Vector3,KellImageProcess.Point3)">
            <summary>
            法向量与点构造面
            </summary>
            <param name="vector"></param>
            <param name="point"></param>
        </member>
        <member name="M:KellImageProcess.Face.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            解析式构造面
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:KellImageProcess.Face.#ctor(KellImageProcess.Point3,KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            三点定面
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="point3"></param>
        </member>
        <member name="M:KellImageProcess.Face.ToString">
            <summary>
            转化为可视化的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.Transform(KellImageProcess.Face,KellImageProcess.Vector3)">
            <summary>
            旋转
            </summary>
            <param name="face"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.Transform(KellImageProcess.Face,KellImageProcess.Point3)">
            <summary>
            平移
            </summary>
            <param name="face"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.Transform(KellImageProcess.Face,KellImageProcess.Vector3,KellImageProcess.Point3)">
            <summary>
            先旋转，后平移
            </summary>
            <param name="face"></param>
            <param name="vector"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.Transform(KellImageProcess.Face,KellImageProcess.Point3,KellImageProcess.Vector3)">
            <summary>
            先平移，后旋转
            </summary>
            <param name="face"></param>
            <param name="point"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.IsEqual(KellImageProcess.Face,KellImageProcess.Face)">
            <summary>
            是否相等
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.ShareFace(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            空间中的两线段是否共面
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Face.ShareFace(KellImageProcess.Vector3,KellImageProcess.Vector3)">
            <summary>
            空间中的两向量是否共面
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Face.N">
            <summary>
            法向量
            </summary>
        </member>
        <member name="P:KellImageProcess.Face.P">
            <summary>
            面上的某一点
            </summary>
        </member>
        <member name="P:KellImageProcess.Face.A">
            <summary>
            解析式中的A
            </summary>
        </member>
        <member name="P:KellImageProcess.Face.B">
            <summary>
            解析式中的B
            </summary>
        </member>
        <member name="P:KellImageProcess.Face.C">
            <summary>
            解析式中的C
            </summary>
        </member>
        <member name="P:KellImageProcess.Face.D">
            <summary>
            解析式中的D
            </summary>
        </member>
        <member name="T:KellImageProcess.Line2">
            <summary>
            二维线
            </summary>
        </member>
        <member name="M:KellImageProcess.Line2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Line2.#ctor(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            两点定线
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:KellImageProcess.Line2.#ctor(KellImageProcess.Point2,System.Single,System.Double)">
            <summary>
            返回长度为length，斜率为xl，过p且以p为始点的线段
            </summary>
            <param name="p"></param>
            <param name="xl"></param>
            <param name="length"></param>
        </member>
        <member name="M:KellImageProcess.Line2.#ctor(System.Single,System.Single,System.Single,System.Double)">
            <summary>
            解析式构造线
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="length"></param>
        </member>
        <member name="M:KellImageProcess.Line2.MakeLine(KellImageProcess.Point2,KellImageProcess.Point2)">
            <summary>
            根据已知两点坐标，求过这两点的直线解析方程： a*x+b*y+c = 0  (a >= 0) 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Line2.ToString">
            <summary>
            转化为可视化的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Line2.Point1">
            <summary>
            始点
            </summary>
        </member>
        <member name="P:KellImageProcess.Line2.Point2">
            <summary>
            终点
            </summary>
        </member>
        <member name="P:KellImageProcess.Line2.K">
            <summary>
            斜率
            </summary>
        </member>
        <member name="P:KellImageProcess.Line2.A">
            <summary>
            解析式中的A
            </summary>
        </member>
        <member name="P:KellImageProcess.Line2.B">
            <summary>
            解析式中的B
            </summary>
        </member>
        <member name="P:KellImageProcess.Line2.C">
            <summary>
            解析式中的C
            </summary>
        </member>
        <member name="T:KellImageProcess.Line3">
            <summary>
            三维线
            </summary>
        </member>
        <member name="M:KellImageProcess.Line3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:KellImageProcess.Line3.#ctor(KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            两点定线
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:KellImageProcess.Line3.#ctor(KellImageProcess.Point3,System.Single,System.Double)">
            <summary>
            返回长度为length，斜率为xl，过p且以p为始点的线段
            </summary>
            <param name="p"></param>
            <param name="xl"></param>
            <param name="length"></param>
        </member>
        <member name="M:KellImageProcess.Line3.#ctor(System.Single,System.Single,System.Single,System.Double)">
            <summary>
            解析式构造线
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="length"></param>
        </member>
        <member name="M:KellImageProcess.Line3.MakeLine(KellImageProcess.Point3,KellImageProcess.Point3)">
            <summary>
            根据已知两点坐标，求过这两点的直线解析方程： a*x+b*y+c = 0  (a >= 0) 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.Line3.ToString">
            <summary>
            转化为可视化的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.Line3.Point1">
            <summary>
            始点
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.Point2">
            <summary>
            终点
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.Kyx">
            <summary>
            Y对X的斜率
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.Kzx">
            <summary>
            Z对X的斜率
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.A">
            <summary>
            解析式中的A
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.B">
            <summary>
            解析式中的B
            </summary>
        </member>
        <member name="P:KellImageProcess.Line3.C">
            <summary>
            解析式中的C
            </summary>
        </member>
        <member name="T:KellImageProcess.FFdistance">
            <summary>
            面面距离
            </summary>
        </member>
        <member name="M:KellImageProcess.FFdistance.GetDistance(KellImageProcess.Face,KellImageProcess.Face)">
            <summary>
            求面面距离
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.LFcross">
            <summary>
            线面交点
            </summary>
        </member>
        <member name="M:KellImageProcess.LFcross.GetCross(KellImageProcess.Line3,KellImageProcess.Face)">
            <summary>
            求线面交点
            </summary>
            <param name="line"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.LLcross">
            <summary>
            线线交点
            </summary>
        </member>
        <member name="M:KellImageProcess.LLcross.GetLLcrs2(KellImageProcess.Line2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            求二维线线交点
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="cross"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.LLcross.GetLLcrs3(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
            求三维线线交点
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.LLdistance">
            <summary>
            线线距离
            </summary>
        </member>
        <member name="M:KellImageProcess.LLdistance.GetDistance2(KellImageProcess.Line2,KellImageProcess.Line2)">
            <summary>
             求二维线线距
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.LLdistance.GetDistance3(KellImageProcess.Line3,KellImageProcess.Line3)">
            <summary>
             求三维线线距
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.PFdistance">
            <summary>
            点面距离
            </summary>
        </member>
        <member name="M:KellImageProcess.PFdistance.GetDistance(KellImageProcess.Point3,KellImageProcess.Face)">
            <summary>
            求点面距离，无返回垂足
            </summary>
            <param name="point"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.PFdistance.GetDistance(KellImageProcess.Point3,KellImageProcess.Face,KellImageProcess.Point3@)">
            <summary>
            求点面距离，有返回垂足
            </summary>
            <param name="point"></param>
            <param name="face"></param>
            <param name="crossP"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.PLdistance">
            <summary>
            点线距离
            </summary>
        </member>
        <member name="M:KellImageProcess.PLdistance.GetDistance2(KellImageProcess.Point2,KellImageProcess.Line2,KellImageProcess.Point2@)">
            <summary>
            求二维点线距
            </summary>
            <param name="point"></param>
            <param name="line"></param>
            <param name="crossP"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.PLdistance.GetDistance3(KellImageProcess.Point3,KellImageProcess.Line3,KellImageProcess.Point3@)">
            <summary>
            求三维点线距
            </summary>
            <param name="point"></param>
            <param name="line"></param>
            <param name="crossP"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.PLdistance.GetDistance3(KellImageProcess.Point3,KellImageProcess.Point3,KellImageProcess.Point3,KellImageProcess.Point3@)">
            <summary>
            求三维点线的两点的距离
            </summary>
            <param name="point"></param>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="crossP"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.PPdistance">
            <summary>
            点点距离
            </summary>
        </member>
        <member name="M:KellImageProcess.PPdistance.GetPPdis2(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            求二维点点距
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.PPdistance.GetPPdis3(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            求三维点点距
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.XL">
            <summary>
            斜率类
            </summary>
        </member>
        <member name="M:KellImageProcess.XL.Getxl2(KellImageProcess.Line2)">
            <summary>
            求二维斜率
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.XL.Getxl3(KellImageProcess.Line3)">
            <summary>
            求三维斜率
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.VectorDirection">
            <summary>
            向量方向类
            </summary>
        </member>
        <member name="M:KellImageProcess.VectorDirection.GetDirection2(KellImageProcess.Line2)">
            <summary>
            求二维直线的方向角[0,2*PI)，弧度为单位
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.VectorDirection.GetDirection3(KellImageProcess.Line3)">
            <summary>
            求三维直线的方向角[0,2*PI)，弧度为单位
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.VectorDirection.GetDirection2(KellImageProcess.Vector2)">
            <summary>
            求二维向量的方向角[0,2*PI)，弧度为单位
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.VectorDirection.GetDirection3(KellImageProcess.Vector3)">
            <summary>
            求三维向量的方向角[0,2*PI)，弧度为单位
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.RememberObject">
            <summary>
            可序列化的记忆对象结构
            </summary>
        </member>
        <member name="F:KellImageProcess.RememberObject.RealPosition">
            <summary>
            实际位置
            </summary>
        </member>
        <member name="F:KellImageProcess.RememberObject.BaseBmp">
            <summary>
            未经过二值化的记忆区域中的位图
            </summary>
        </member>
        <member name="F:KellImageProcess.RememberObject.Threshold">
            <summary>
            当前记忆对象的灰度阀值
            </summary>
        </member>
        <member name="F:KellImageProcess.RememberObject.Empty">
            <summary>
            表示一个空RememberObject对象
            </summary>
        </member>
        <member name="M:KellImageProcess.RememberObject.op_Equality(KellImageProcess.RememberObject,KellImageProcess.RememberObject)">
            <summary>
            操作符重载，相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberObject.op_Inequality(KellImageProcess.RememberObject,KellImageProcess.RememberObject)">
            <summary>
            操作符重载，不相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberObject.Equals(System.Object)">
            <summary>
            重载Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberObject.GetHashCode">
            <summary>
            重载GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellImageProcess.RememberAndSearch">
            <summary>
            记忆和匹配类
            </summary>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.#ctor(System.Drawing.Size)">
            <summary>
            构造函数
            </summary>
            <param name="size">要记忆的基准位图的大小</param>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.ClearRemember">
            <summary>
            清空记忆对象
            </summary>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.StopSearch">
            <summary>
            停止匹配搜索
            </summary>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.SaveRememberObjectToFile(System.String)">
            <summary>
            将记忆对象保存到文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.LoadRememberObjectFromFile(System.String)">
            <summary>
            从文件中载入记忆对象
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.RememberBaseImage(System.Drawing.Bitmap,System.Drawing.Point,System.Byte,System.Boolean)">
            <summary>
            记忆基准位图(搜索匹配Search()之前要先调用此方法)，搜索过一次以后若想要记忆另外的对象则要调用此方法(载入新的记忆对象)
            </summary>
            <param name="baseImage">记忆区域中的基准位图</param>
            <param name="realPosition">基准位图的实际位置</param>
            <param name="thresholdValue">二值化阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.ClearGraphics(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            以指定的颜色刷新画布
            </summary>
            <param name="bmp"></param>
            <param name="clearColor"></param>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Search(System.Drawing.Bitmap,System.Drawing.Point,System.Byte,System.Boolean,System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            记忆新的基准对象并开始搜索匹配，并返回最匹配的位置列表(最多ReservedCount个)，且一旦记忆过基准位图就不要用此方法，而应该用Search(Bitmap, Point)，否则会浪费时间
            </summary>
            <param name="baseImage">基准位图</param>
            <param name="realPosition">新的基准位图的实际位置</param>
            <param name="threshold">二值化阀值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <param name="offsetBmp">偏移对象位图</param>
            <param name="offsetPosition">偏移位图的位置</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Search(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            在已有的记忆中开始搜索匹配，并返回最匹配的位置列表(最多ReservedCount个)
            </summary>
            <param name="offsetBmp">偏移对象位图</param>
            <param name="offsetPosition">偏移位图的位置</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.GetEffectRect(System.Drawing.Bitmap)">
            <summary>
            获取指定位图的有效匹配区域
            </summary>
            <param name="bmp">二值位图</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.RecognizeObject(System.Drawing.Rectangle)">
            <summary>
            获取最相似的识别对象数组
            </summary>
            <param name="offsetCheckRect">偏移位图的有效匹配区域</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Match(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            根据二进制编码字符串获取当前位置的匹配率
            </summary>
            <param name="Eigenvalue">匹配的基准对象二进制编码字符串</param>
            <param name="arrCurrentEigenvalue">需要匹配的偏移对象二进制编码字符串</param>
            <returns>返回匹配的百分点[0, 100]</returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.GraspRawData(System.Drawing.Bitmap,System.Drawing.Rectangle@)">
            <summary>
            根据给定的位图获取基准对象的二进制编码结构，最为关键的代码
            </summary>
            <param name="bmp"></param>
            <param name="effectRect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.CheckGraspRawData(System.Drawing.Bitmap)">
            <summary>
            根据给定的位图的指定区域获取偏移对象的二进制编码结构，最为关键的代码
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.FastClipBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            快速剪裁指定区域的位图
            </summary>
            <param name="srcBmp"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.InitArray(System.Int32,System.Int32,System.Byte)">
            <summary>
            初始化一个整型二维数组
            </summary>
            <param name="width">数组宽</param>
            <param name="height">数组高</param>
            <param name="init">初始值</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.DilationCross(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            十字型膨胀
            </summary>
            <param name="src">二值化数组</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.ErosionCross(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            十字型腐蚀
            </summary>
            <param name="src">二值化数组</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Array2Image(System.Byte[0:,0:])">
            <summary>
            将二维数组转换为灰度位图流
            </summary>
            <param name="GrayArray">灰度数组</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.ErosionCross(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            十字型腐蚀
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.DilationCross(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            十字型膨胀
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht"></param>
            <param name="threshold"></param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Opening(System.Drawing.Bitmap,System.Int32,System.Byte,System.Boolean)">
            <summary>
            开运算
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Filtering(System.Drawing.Bitmap,System.Int32,System.Byte,System.Byte)">
            <summary>
            利用迭代开运算的方法进行图像滤波，返回二值位图，可是有一个致命的缺点：有边框！
            </summary>
            <param name="b">位图流</param>
            <param name="blkORwht">黑检测还是白检测</param>
            <param name="threshold"></param>
            <param name="degree">迭代次数，范围[1, 255]，默认为1次</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Bitize(System.Drawing.Bitmap,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            二值化
            </summary>
            <param name="bmp">位图流</param>
            <param name="threshold">阈值</param>
            <param name="needGrayExtend">是否需要灰度拉伸</param>
            <param name="needFilter">是否需要除噪</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.GrayExtend(System.Drawing.Bitmap)">
            <summary>
            获取经过灰度拉伸后的位图(灰度图)
            </summary>
            <param name="srcBmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.GetGrayExValue(System.Byte)">
            <summary>
            拉伸范围[0,60)[60,180)[180,255)[255] --> [0,30)[30,220)[220,255)[255]
            </summary>
            <param name="gray"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Image2Array(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            将位图流转换为二维数组
            </summary>
            <param name="b">位图流</param>
            <param name="graied">已经灰度化</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.Gray(System.Drawing.Bitmap)">
            <summary>
            灰度化
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.BinaryArray(System.Drawing.Bitmap,System.Byte)">
            <summary>
            将灰度化的位图流转换为二值数组
            </summary>
            <param name="b">位图流</param>
            <param name="threshold">阈值</param>
            <returns></returns>
        </member>
        <member name="M:KellImageProcess.RememberAndSearch.BinaryImage(System.Byte[0:,0:],System.Drawing.Color,System.Drawing.Color)">
            <summary>
            将二值数组转换为双色位图流
            </summary>
            <param name="GrayArray">二值数组</param>
            <param name="bgColor">背景色</param>
            <param name="fgColor">前景色</param>
            <returns></returns>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.NeedFilter">
            <summary>
            是否需要除噪
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.ObjectBasePosition">
            <summary>
            获取基准位图中目标的实际位置
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.ObjectOffsetPosition">
            <summary>
            获取偏移位图中目标的实际位置
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.RememberPosition">
            <summary>
            获取记忆的基准位图的实际位置
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.OffsetEffectRect">
            <summary>
            获取偏移对象需要匹配的有效区域
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.ShowInTime">
            <summary>
            获取或设置搜索匹配时是否要实时显示
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.Threshold">
            <summary>
            获取或设置二值化阀值
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.NeedGrayExtend">
            <summary>
            获取或设置二值化时是否需要灰度拉伸
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.TheRememberObject">
            <summary>
            获取当前的记忆对象
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.HasRemember">
            <summary>
            获取当前状态是否曾经记忆基准对象
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.BaseImage">
            <summary>
            获取基准对象的临时位图
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.TempImage">
            <summary>
            获取偏移对象的临时匹配位图
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.CurrentSearchPosition">
            <summary>
            获取当前搜索匹配的位置
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.BaseEffectRectangle">
            <summary>
            获取基准对象需要匹配的有效区域
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.ReservedCount">
            <summary>
            获取或设置要保留的最匹配的位置对象个数
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.SuitedPositionList">
            <summary>
            获取当前搜索中最匹配的位置对象列表(默认最多reservedCount个)
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.MatchRate">
            <summary>
            获取或设置可接受的匹配率(范围：(0,100]，默认为10)
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.PointSize">
            <summary>
            获取或设置匹配的精度(值越小越精确)，范围：(2, 2)到(rememberImage.Width / 2, rememberImage.Height / 2)，默认为(10, 10)
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.MatchCount">
            <summary>
            获取当前匹配的次数
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.BlkORwht">
            <summary>
            获取或设置白匹配还是黑匹配
            0为黑匹配，其他值为白匹配(默认)
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.RememberImage">
            <summary>
            获取记忆中的基准对象的二值位图
            </summary>
        </member>
        <member name="P:KellImageProcess.RememberAndSearch.OffsetImage">
            <summary>
            获取要匹配偏移对象的二值位图
            </summary>
        </member>
        <member name="T:KellImageProcess.Suited">
            <summary>
            位置匹配结构
            </summary>
        </member>
        <member name="F:KellImageProcess.Suited.Location">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:KellImageProcess.Suited.MaxMatch">
            <summary>
            匹配率
            </summary>
        </member>
        <member name="M:KellImageProcess.Suited.#ctor(System.Drawing.Point,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="Location"></param>
            <param name="MaxMatch"></param>
        </member>
        <member name="T:KellImageProcess.MaxMatchSort">
            <summary>
            匹配率排序类
            </summary>
        </member>
    </members>
</doc>
